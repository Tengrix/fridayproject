{"version":3,"sources":["n3-MySuperComponents/SuperInputText/SuperInputText.module.css","n1-main/a3-dal/mainAPI.ts","n1-main/a2-bll/store/mainAuthReducer.ts","n2-features/profile/Profile.tsx","n2-features/b4-errors/error/Error.tsx","n2-features/b3-pass/Password/RenewalPass.tsx","n3-MySuperComponents/SuperButton/SuperButton.tsx","n3-MySuperComponents/SuperInputText/SuperInputText.tsx","n3-MySuperComponents/SuperCheckbox/SuperCheckbox.tsx","n1-main/a1-ui/loading/Loading.tsx","n2-features/b2-auth/sign-in-up/SignIn.tsx","n2-features/b2-auth/sign-in-up/SignUp.tsx","n2-features/b3-pass/Password/NewPass.tsx","n2-features/profile/UpdateProfile.tsx","n2-features/cards/Packs.tsx","n2-features/cards/card/Cards.tsx","n1-main/a2-bll/store/cardsPackReducer.ts","n2-features/b5-cardsPack/AddNewPack.tsx","n2-features/b5-cardsPack/CardsPack.tsx","n1-main/a1-ui/routes/Routes.tsx","n2-features/b2-auth/sign-in-up/Logout.tsx","n1-main/a1-ui/header/Header.tsx","n1-main/a1-ui/App.tsx","reportWebVitals.ts","n1-main/a2-bll/store/store.ts","index.tsx","n1-main/a1-ui/header/Header.module.css","n2-features/b2-auth/sign-in-up/SignIn.module.css","utils/styles/CommonStylesForAuth.module.css","n2-features/profile/Profile.module.css","n3-MySuperComponents/SuperButton/SuperButton.module.css","n3-MySuperComponents/SuperCheckbox/SuperCheckbox.module.css","n1-main/a1-ui/loading/Loading.module.css"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","data","delete","put","message","resetPasswordToken","get","name","cardsPack","id","_id","slice","createSlice","initialState","isLogged","user","avatar","isRegister","commonError","isUpdatedPassword","fogot","isInitialized","updatedUser","reducers","switchIsRegister","state","action","payload","newValueIsRegister","setCommonRegister","error","logIn","value","setUser","setUpdateUser","setNewPassword","isUpPassword","switchFogot","newFogot","authReducer","reducer","actions","Profile","dispatch","useDispatch","userName","useSelector","auth","userEmail","userAvatar","useEffect","then","res","Card","className","s","root","CardActionArea","CardMedia","media","image","title","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","to","PATH","SIGN_IN","Error","RenewalPass","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","catch","e","console","log","forgot","resetForm","styles","authBlock","handleSubmit","inputBlock","TextField","placeholder","fullWidth","onChange","handleChange","type","style","SuperButton","red","restProps","finalClassName","default","SuperInputText","onChangeText","onKeyPress","onEnter","spanClassName","finalSpanClassName","margin","required","label","currentTarget","key","SuperCheckbox","onChangeChecked","children","finalInputClassName","checkbox","FormControlLabel","control","Checkbox","checked","Loading","loadPage","loader","SignInWithFormik","length","finally","PROFILE","Container","maxWidth","paper","avatarConatiner","Avatar","typographyContainer","form","noValidate","getFieldProps","touched","Grid","container","item","xs","RENEWAL_PASS","SIGN_UP","SignUp","sendDataToRegister","signUpData","resp","addedUser","signUpTC","confPass","NewPass","token","useParams","newPassword","UpdateProfile","oldName","oldAva","useState","setNewName","setNewAva","newData","updateProfile","onClick","Packs","max","min","cellPadding","width","user_id","cardsCount","created","updateted","map","c","align","Cards","answer","question","cardsPack_id","grade","shots","updated","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","SetPackCards","AddNewPack","props","newTitle","setNewTitle","newCardPack","CardsPack","useCallback","getState","NEW_PASS","ERROR","UPDATE_USER","PACKS","CARDS","PACKS_RAW","Routes","path","exact","render","from","Logout","logoutHandler","info","Header","nav","replace","headerLink","activeClassName","activeLink","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0beb552a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1v9gu\",\"errorInput\":\"SuperInputText_errorInput__hdBbv\",\"error\":\"SuperInputText_error__h1p0E\"};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType<{ body: loginResponseType }>>(\"auth/login\", {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n        })\r\n    },\r\n    getProfile() {\r\n        return instance.post<userType>(\"auth/me\")\r\n    },\r\n    signUp(data: signUpDataType) {\r\n        return instance.post<signUpResponseType>(\"auth/register\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<logoutResponseType>(\"auth/me\")\r\n    },\r\n    updateUser(data: NewUserType) {\r\n        return instance.put<updatedUserResponseType>(\"auth/me\", data)\r\n    },\r\n    forgot(email: string, message: string) {\r\n        return instance.post<SendNewPassResponseType>(\"auth/forgot\", { email, message })\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SendNewPassResponseType>(\"auth/set-new-password\", {\r\n            password,\r\n            resetPasswordToken,\r\n        })\r\n    },\r\n    setCardsPack(){\r\n        return instance.get<ResponseCardsType>(`cards/pack` )\r\n    },\r\n    createCardsPack(name:string){\r\n        return instance.post<ResponseCardsType>(`cards/pack`,{cardsPack:{name:name}})\r\n    },\r\n    deletePack(){\r\n        return instance.delete<ResponseCardsType>(`cards/pack/?id=60e60d116c427600043dcb65`)\r\n    },\r\n    updatePack(id:string,name:string){\r\n        return instance.put<ResponseCardsType>(`cards/pack`,{cardsPack:{_id:id, name:name}})\r\n    }\r\n}\r\n\r\nexport type createCardsPackType = {\r\n        name:string\r\n        private:boolean\r\n}\r\nexport type initCardsPack = {\r\n    _id: string;\r\n    user_id: string;\r\n    name: string;\r\n    cardsCount: number;\r\n    created?: string;\r\n    updated?: string;\r\n\r\n}\r\nexport type ResponseCardsType = {\r\n    cardsPack:initCardsPack[]\r\n    cardPacksTotalCount:number;\r\n    maxCardsCount:number;\r\n    minCardsCount:number;\r\n    page:number;\r\n    pageCount:number;\r\n}\r\nexport type CardsPackType = {\r\n    packName:string;\r\n    min:number;\r\n    max:number;\r\n    sortPacks:number|string;\r\n    page:number;\r\n    pageCount:number;\r\n    user_id:string\r\n}\r\nexport type NewUserType = {\r\n    name: string\r\n    avatar: string\r\n}\r\ntype updatedUserResponseType = {\r\n    updatedUser: {}\r\n    error?: string\r\n}\r\ntype logoutResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\ntype SendNewPassResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\ntype signUpResponseType = {\r\n    addedUser: {}\r\n    error?: string\r\n}\r\ntype signUpDataType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\nexport type SignInType<T = {}> = {\r\n    data: signUpDataType\r\n    rememberMe: boolean\r\n}\r\nexport type userType = {\r\n    id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    error?: string\r\n    body: loginResponseType\r\n}\r\ntype loginResponseType = {\r\n    data: userType\r\n    created: any\r\n    updated: any\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI, NewUserType, userType } from \"../../a3-dal/mainAPI\"\r\n//\r\n//\r\ntype ActionType =\r\n    | LogInACType\r\n    | setUserType\r\n    | switchIsAuthType\r\n    | setErrorRegisterType\r\n    | updatedUserType\r\n    | setNewPasswordType\r\n    | isInitializedType\r\n    | switchFogotType\r\n//\r\n//\r\ntype switchIsAuthType = ReturnType<typeof switchIsRegister>\r\ntype setErrorRegisterType = ReturnType<typeof setCommonRegister>\r\ntype LogInACType = ReturnType<typeof logIn>\r\ntype setUserType = ReturnType<typeof setUser>\r\ntype updatedUserType = ReturnType<typeof setUpdateUser>\r\ntype setNewPasswordType = ReturnType<typeof setNewPassword>\r\ntype isInitializedType = ReturnType<typeof isInitialized>\r\ntype switchFogotType = ReturnType<typeof switchFogot>\r\n//\r\n//\r\ntype initStateType = {\r\n    isLogged: boolean\r\n    user: userType\r\n    isRegister: boolean\r\n    commonError: string\r\n    isUpdatedPassword: boolean\r\n    fogot: boolean\r\n    isInitialized: boolean\r\n    updatedUser: NewUserType\r\n}\r\n//\r\n//\r\nlet initState: initStateType = {\r\n    isLogged: false,\r\n    user: {\r\n        id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n    isRegister: false,\r\n    commonError: \"\",\r\n    isUpdatedPassword: false,\r\n    fogot: false,\r\n    isInitialized: false,\r\n    updatedUser: {\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initState,\r\n    reducers: {\r\n        switchIsRegister(state, action:PayloadAction<{newValueIsRegister:boolean}>){\r\n            state.isRegister = action.payload.newValueIsRegister;\r\n        },\r\n        setCommonRegister(state, action:PayloadAction<{error:any}>){\r\n            state.commonError = action.payload.error\r\n        },\r\n        logIn(state,action:PayloadAction<{value:boolean}>){\r\n            state.isLogged = action.payload.value\r\n        },\r\n        setUser(state, action:PayloadAction<{user:{id: string, email: string, name: string, avatar: string}}>){\r\n            state.user = action.payload.user\r\n        },\r\n        setUpdateUser(state,action:PayloadAction<{data:NewUserType}>){\r\n            state.updatedUser = action.payload.data\r\n        },\r\n        setNewPassword(state,action:PayloadAction<{isUpPassword: boolean}>){\r\n            state.isUpdatedPassword = action.payload.isUpPassword\r\n        },\r\n        isInitialized(state,action:PayloadAction<{value:boolean}>){\r\n            state.isInitialized = action.payload.value\r\n        },\r\n        switchFogot(state,action:PayloadAction<{newFogot: boolean}>){\r\n            state.fogot = action.payload.newFogot\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {switchIsRegister,setCommonRegister,logIn,setUser,setUpdateUser,setNewPassword,isInitialized,switchFogot} = slice.actions\r\n\r\n//Thunk\r\nexport const signUpTC = (email: string, password: string) => {\r\n    const signUpData = { email, password }\r\n    return (dispatch: Dispatch<ActionType>) => {\r\n        authAPI\r\n            .signUp(signUpData)\r\n            .then((resp) => {\r\n                if (resp.data.addedUser) {\r\n                    dispatch(switchIsRegister({newValueIsRegister:true}))\r\n                } else {\r\n                    dispatch(setCommonRegister({error:resp.data.error}))\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n                console.log(\"Error:\", { ...e })\r\n                dispatch(setCommonRegister(error))\r\n            })\r\n    }\r\n}\r\nexport const LoginTC =\r\n    (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch<ActionType>) => {\r\n        authAPI\r\n            .login(email, password, rememberMe)\r\n            .then((res) => {\r\n                dispatch(logIn({value:true}))\r\n            })\r\n            .catch((e) => {\r\n                const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n                console.log(\"Error:\", { ...e })\r\n                dispatch(setCommonRegister({error:error}))\r\n            })\r\n            .finally(() => {})\r\n    }\r\nexport const LogoutTC = () => (dispatch: Dispatch) => {\r\n    authAPI\r\n        .logout()\r\n        .then((res) => {\r\n            if (res.data.info) {\r\n                dispatch(logIn({value:false}))\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            dispatch(setCommonRegister({error:error}))\r\n        })\r\n}\r\nexport const GetUserTC = () => (dispatch: Dispatch<setUserType>) => {\r\n    authAPI.getProfile().then((res) => {\r\n        let { id, email, name, avatar } = res.data\r\n        dispatch(setUser({user:{id, email, name, avatar}}))\r\n    })\r\n}\r\nexport const UpdateUserInfo = (data: NewUserType) => (dispatch: Dispatch) => {\r\n    authAPI\r\n        .updateUser(data)\r\n        .then((res) => {\r\n            dispatch(setUpdateUser({data:data}))\r\n        })\r\n        .finally(() => {\r\n            console.log(\"check profile\")\r\n        })\r\n        .catch((e) => {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            dispatch(setCommonRegister({error:error}))\r\n        })\r\n}\r\nexport const isInitializedTC = () => (dispatch: Dispatch) => {\r\n    authAPI\r\n        .getProfile()\r\n        .then((res) => {\r\n            dispatch(logIn({value:true}))\r\n        })\r\n        .catch(() => {})\r\n        .finally(() => {\r\n            dispatch(isInitialized({value:true}))\r\n        })\r\n}\r\nexport const forgot = (email: string, message: string) => (dispatch: Dispatch) => {\r\n    authAPI\r\n        .forgot(email, message)\r\n        .then((res) => {\r\n            if (!res.data.error) {\r\n                dispatch(switchFogot({newFogot:true}))\r\n            } else {\r\n                dispatch(setCommonRegister({error:res.data.error}))\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            dispatch(setCommonRegister({error:error}))\r\n        })\r\n}\r\nexport const SetNewPassword =\r\n    (newPassword: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\r\n        authAPI\r\n            .setNewPassword(newPassword, resetPasswordToken)\r\n            .then((res) => {\r\n                if (!res.data.error) {\r\n                    dispatch(setNewPassword({isUpPassword:true}))\r\n                } else {\r\n                    dispatch(setCommonRegister({error:res.data.error}))\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n                console.log(\"Error:\", { ...e })\r\n                dispatch(setCommonRegister({error:error}))\r\n            })\r\n    }\r\n","import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../../n1-main/a2-bll/store/store\"\r\nimport { GetUserTC } from \"../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { PATH } from \"../../n1-main/a1-ui/routes/Routes\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport CardContent from \"@material-ui/core/CardContent\"\r\nimport CardMedia from \"@material-ui/core/CardMedia\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport s from \"./Profile.module.css\"\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const userName = useSelector<AppRootStateType, string>((state) => state.auth.user.name)\r\n    const userEmail = useSelector<AppRootStateType, string>((state) => state.auth.user.email)\r\n    const userAvatar = useSelector<AppRootStateType, string | undefined>(\r\n        (state) => state.auth.user.avatar\r\n    )\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    useEffect(() => {\r\n        dispatch(GetUserTC())\r\n    }, [dispatch])\r\n\r\n    if (!isLogged) {\r\n        return <Redirect to={PATH.SIGN_IN} />\r\n    }\r\n\r\n    return (\r\n        <Card className={s.root}>\r\n            <CardActionArea>\r\n                <CardMedia className={s.media} image={userAvatar} title=\"Contemplative Reptile\" />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        Name: {userName}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        Email: {userEmail}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime magnam\r\n                        veritatis suscipit. Dolor, quas iste eveniet et saepe quibusdam expedita\r\n                        nihil incidunt quo odio cum culpa, delectus aliquam earum nemo.\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    Learn More\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\n\r\nconst Error = () => {\r\n\r\n    return(\r\n        <div>\r\n            <h1>\r\n\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Error","import { Button, TextField } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { forgot } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport styles from \"../../../utils/styles/CommonStylesForAuth.module.css\"\r\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst RenewalPass = () => {\r\n    const message = `<div style=\"background-color: lime; padding: 15px\"> \r\n    password recovery link: <a href='https://tengrix.github.io/fridayproject/#/new-pass/$token$'>Click to here</a></div>`\r\n    const fogot = useSelector<AppRootStateType, boolean>((state) => state.auth.fogot)\r\n    const commonError = useSelector<AppRootStateType, string>((state) => state.auth.commonError)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Email required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(forgot(values.email, message))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (fogot)\r\n        return (\r\n            <div className={styles.authBlock}>\r\n                <div>Checked your email!</div>\r\n                <div>\r\n                <NavLink to={PATH.SIGN_IN}><Button variant=\"outlined\"><KeyboardReturnIcon/></Button></NavLink>\r\n                </div>\r\n            </div>\r\n        )\r\n    return (\r\n        <div className={styles.authBlock}>\r\n            <form onSubmit={formik.handleSubmit} className={styles.inputBlock}>\r\n                <TextField\r\n                    placeholder=\"email\"\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                <Button type=\"submit\" variant=\"contained\" color=\"secondary\">Send message</Button>\r\n                <NavLink to={PATH.SIGN_IN}><Button variant=\"outlined\"><KeyboardReturnIcon/></Button></NavLink>\r\n                {formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\r\n                {commonError && <div style={{ color: \"red\" }}>{commonError}</div>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default RenewalPass\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = any\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    type: string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, type,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.default}${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <Button\r\n            type={type}\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        >Sign In </Button>\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, KeyboardEvent } from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = any\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    placeholder: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        placeholder,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n            && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n            && e.key === 'Enter' // и если нажата кнопка Enter\r\n            && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n   /* const finalInputClassName = `${s.errorInput} ${className}` // need to fix with (?:) and s.superInput*/\r\n\r\n    return (\r\n        <>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label={placeholder}\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport React, { ChangeEvent } from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = any\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <>\r\n            <FormControlLabel\r\n                control={<Checkbox className={finalInputClassName} onChange={onChangeCallback} {...restProps} value=\"remember\" color=\"secondary\" />}\r\n                label=\"Remember me\"\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React from \"react\";\r\nimport s from './Loading.module.css'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <>\r\n            <div className={s.loadPage}>\r\n                <div className={s.loader}>\r\n                    <div>\r\n                        <div>\r\n                            <div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div>\r\n                                            <div>\r\n                                                <div>\r\n                                                    <div></div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Loading","import React from \"react\"\r\nimport SuperButton from \"../../../n3-MySuperComponents/SuperButton/SuperButton\"\r\nimport SuperInputText from \"../../../n3-MySuperComponents/SuperInputText/SuperInputText\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { LoginTC } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport SuperCheckbox from \"../../../n3-MySuperComponents/SuperCheckbox/SuperCheckbox\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport { NavLink, Redirect } from \"react-router-dom\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\nimport { useFormik } from \"formik\"\r\nimport s from \"./SignIn.module.css\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport { Button } from \"@material-ui/core\"\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\r\nimport Loading from \"../../../n1-main/a1-ui/loading/Loading\"\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst SignInWithFormik = () => {\r\n    const dispatch = useDispatch()\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Email required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            } else if (values.password.length < 4) {\r\n                errors.password = \"Invalid password\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(LoginTC(values.email, values.password, values.rememberMe))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLogged) {\r\n        return <Redirect to={PATH.PROFILE} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isLogged ? (\r\n                <Loading />\r\n            ) : (\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <div className={s.paper}>\r\n                        <div className={s.avatarConatiner}>\r\n                            <Avatar className={s.avatar}>\r\n                                <AccountCircleIcon />\r\n                            </Avatar>\r\n                        </div>\r\n                        <div className={s.typographyContainer}>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign In\r\n                            </Typography>\r\n                        </div>\r\n\r\n                        <form onSubmit={formik.handleSubmit} className={s.form} noValidate>\r\n                            <SuperInputText\r\n                                placeholder={\"Username or email\"}\r\n                                type={\"email\"}\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email && (\r\n                                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                            )}\r\n\r\n                            <SuperInputText\r\n                                placeholder={\"Password\"}\r\n                                type={\"password\"}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n\r\n                            {formik.touched.password && formik.errors.password && (\r\n                                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                            )}\r\n\r\n                            <SuperCheckbox\r\n                                type={\"rememberMe\"}\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                            />\r\n\r\n                            <SuperButton type=\"submit\"></SuperButton>\r\n\r\n                            <Grid container>\r\n                                <Grid item xs>\r\n                                    <NavLink to={PATH.RENEWAL_PASS}>\r\n                                        <Button fullWidth variant=\"outlined\">\r\n                                            <span>Forgot password</span>\r\n                                        </Button>\r\n                                    </NavLink>\r\n                                    <NavLink to={PATH.SIGN_UP}>\r\n                                        <Button fullWidth variant=\"outlined\">\r\n                                            Don't have an account? Sign Up\r\n                                        </Button>\r\n                                    </NavLink>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </div>\r\n                </Container>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default SignInWithFormik\r\n","import React from \"react\"\r\nimport { signUpTC } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button, TextField } from \"@material-ui/core\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { NavLink, Redirect } from \"react-router-dom\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\nimport { useFormik } from \"formik\"\r\nimport s from \"./SignIn.module.css\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confPass?: string\r\n}\r\n\r\nconst SignUp = () => {\r\n    const isRegister = useSelector<AppRootStateType, boolean>((state) => state.auth.isRegister)\r\n    const commonError = useSelector<AppRootStateType, string>((state) => state.auth.commonError)\r\n    const dispatch = useDispatch()\r\n    const sendDataToRegister = (email: string, password: string) => {\r\n        dispatch(signUpTC(email, password))\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confPass: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Email required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password should be longer 7 symbols\"\r\n            }\r\n            if (values.password !== values.confPass) {\r\n                errors.password = \"Password not identical\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            formik.resetForm()\r\n            sendDataToRegister(values.email, values.password)\r\n        },\r\n    })\r\n    if (isRegister) {\r\n        return <Redirect to={\"/sign-in\"} />\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={s.paper}>\r\n                <div className={s.avatarConatiner}>\r\n                    <Avatar className={s.avatar}>\r\n                        <AccountCircleIcon />\r\n                    </Avatar>\r\n                </div>\r\n                <div className={s.typographyContainer}>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                </div>\r\n                <form onSubmit={formik.handleSubmit} className={s.form} noValidate>\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"Email\"\r\n                        name=\"email\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email && (\r\n                        <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                    )}\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.password}\r\n                    />\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"Confirm password:\"\r\n                        name=\"confPass\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.confPass}\r\n                    />\r\n\r\n                    {formik.errors.password && (\r\n                        <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                    )}\r\n\r\n                    <Button fullWidth variant=\"contained\" color=\"secondary\">\r\n                        Sign Up\r\n                    </Button>\r\n\r\n                    <div style={{ color: \"red\" }}>{commonError}</div>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to={PATH.SIGN_IN}><Button fullWidth variant=\"outlined\">Sign In</Button></NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\nexport default SignUp\r\n","import { Button, TextField } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect, useParams } from \"react-router-dom\"\r\nimport { SetNewPassword } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport styles from \"../../../utils/styles/CommonStylesForAuth.module.css\"\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    confPass?: string\r\n}\r\n\r\nconst NewPass = () => {\r\n    const isUpdatedPassword = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.auth.isUpdatedPassword\r\n    )\r\n    const commonError = useSelector<AppRootStateType, string>((state) => state.auth.commonError)\r\n    const dispatch = useDispatch()\r\n    const { token } = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: \"\",\r\n            confPass: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (values.password.length < 7) {\r\n                errors.password = \"Password should be longer 7 symbols\"\r\n            }\r\n            if (values.password !== values.confPass) {\r\n                errors.password = \"Password not identical\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            debugger\r\n            dispatch(SetNewPassword(values.password, token))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isUpdatedPassword) {\r\n        return <Redirect to={\"/sign-in\"} />\r\n    }\r\n    return (\r\n        <div className={styles.authBlock}>\r\n            <form onSubmit={formik.handleSubmit} className={styles.inputBlock}>\r\n                <TextField\r\n                 variant=\"outlined\"\r\n                    placeholder=\"Password:\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n                <TextField\r\n                variant=\"outlined\"\r\n                    placeholder=\"Confirm password:\"\r\n                    name=\"confPass\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.confPass}\r\n                />\r\n                {formik.errors.password && (\r\n                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                )}\r\n                <Button variant=\"contained\" color=\"secondary\" type={\"submit\"}>Change password</Button>\r\n                <div style={{ color: \"red\" }}>{commonError}</div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default NewPass\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../n1-main/a2-bll/store/store\";\r\nimport {UpdateUserInfo} from \"../../n1-main/a2-bll/store/mainAuthReducer\";\r\nimport {NewUserType} from \"../../n1-main/a3-dal/mainAPI\";\r\nimport { TextField } from '@material-ui/core';\r\nimport s from './Profile.module.css'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst UpdateProfile = () => {\r\n    const dispatch = useDispatch()\r\n    const oldName = useSelector<AppRootStateType,string>(state => state.auth.user.name)\r\n    const oldAva = useSelector<AppRootStateType,string>(state => state.auth.user.avatar)\r\n    const[name, setNewName] = useState<string>(oldName)\r\n    const[avatar, setNewAva] = useState<string>(oldAva)\r\n    const newData:NewUserType = {name,avatar}\r\n    const changeName = () => {\r\n        dispatch(UpdateUserInfo(newData))\r\n    }\r\n    const onChangeName = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n    const onChangeAva = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setNewAva(e.currentTarget.value)\r\n    }\r\n\r\n    return(\r\n        <div className={s.updateProfile}>\r\n            <TextField placeholder={'New name'} value={name} type=\"text\" onChange={onChangeName}/>\r\n            <TextField placeholder={'New URL for Ava'} value={avatar} type=\"text\" onChange={onChangeAva}/>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={changeName}>Submit</Button>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateProfile","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { AppRootStateType } from \"../../n1-main/a2-bll/store/store\"\r\nimport styles from \"./Cards.module.css\"\r\n\r\ntype PacksType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    created: string\r\n    updateted: string\r\n}\r\n\r\nconst Packs = () => {\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    const packs: Array<PacksType> = [\r\n        {\r\n            _id: \"1\",\r\n            user_id: \"1\",\r\n            name: \"no name\",\r\n            cardsCount: 25,\r\n            created: \"2021\",\r\n            updateted: \"2021\",\r\n        },\r\n        {\r\n            _id: \"2\",\r\n            user_id: \"2\",\r\n            name: \"no name\",\r\n            cardsCount: 25,\r\n            created: \"2021\",\r\n            updateted: \"2021\",\r\n        },\r\n        {\r\n            _id: \"3\",\r\n            user_id: \"3\",\r\n            name: \"no name\",\r\n            cardsCount: 25,\r\n            created: \"2021\",\r\n            updateted: \"2021\",\r\n        },\r\n    ]\r\n    if (!isLogged) {\r\n        return <Redirect to={\"/sign-in\"} />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                Search: <input placeholder=\"cards name\" />\r\n                <input type=\"range\" max=\"100\" min=\"0\" value=\"75\" />\r\n                <input type=\"range\" max=\"100\" min=\"0\" value=\"25\" />\r\n                <button>Search</button>\r\n            </div>\r\n            <table cellPadding=\"7\" width=\"100%\" >\r\n                <tr>\r\n                    <th>Card name</th>\r\n                    <th>\r\n                        Cards count\r\n                        <input type=\"button\" value=\"Max\"/>\r\n                        <input type=\"button\" value=\"Min\"/>\r\n                    </th>\r\n                    <th>Created</th>\r\n                    <th>Updated</th>\r\n                    <th>Control</th>\r\n                </tr>\r\n                {packs.map((c) => (\r\n                    <tr key={c._id}>\r\n                        <td align=\"center\">{c.name}</td>\r\n                        <td align=\"center\">{c.cardsCount}</td>\r\n                        <td align=\"center\">{c.created}</td>\r\n                        <td align=\"center\">{c.updateted}</td>\r\n                        <td align=\"center\">\r\n                            <button>learn</button>\r\n                            <button>update</button>\r\n                            <button>delete</button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </table>\r\n            <div>1,2,3,4...5</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs\r\n","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\n\r\ntype CardsType ={\r\n    answer: string,\r\n    question: string,\r\n    cardsPack_id: string,\r\n    grade: number,\r\n    shots: number,\r\n    user_id: string,\r\n    created: string,\r\n    updated: string,\r\n    _id: string,\r\n}\r\n\r\nconst Cards = () => {\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    const cards: Array<CardsType> = [\r\n        {\r\n            answer: \"fgdfgdgd efgdf df\",\r\n            question: \"sgdsgg?\",\r\n            cardsPack_id: \"no name\",\r\n            grade: 4.98,\r\n            shots: 1,\r\n            user_id: \"1\",\r\n            created: \"1\",\r\n            updated: \"1\",\r\n            _id: \"1\",\r\n        },\r\n        {\r\n            answer: \"fgdfgdgd efgdf df\",\r\n            question: \"sgdsgg?\",\r\n            cardsPack_id: \"no name\",\r\n            grade: 4.98,\r\n            shots: 1,\r\n            user_id: \"1\",\r\n            created: \"1\",\r\n            updated: \"1\",\r\n            _id: \"2\",\r\n        },\r\n        {\r\n            answer: \"fgdfgdgd efgdf df\",\r\n            question: \"sgdsgg?\",\r\n            cardsPack_id: \"no name\",\r\n            grade: 4.98,\r\n            shots: 1,\r\n            user_id: \"1\",\r\n            created: \"1\",\r\n            updated: \"1\",\r\n            _id: \"3\",\r\n        },\r\n        \r\n    ]\r\n    if (!isLogged) {\r\n        return <Redirect to={\"/sign-in\"} />\r\n    }\r\n    return (\r\n        <div>\r\n            <table cellPadding=\"7\" width=\"100%\">\r\n                <tr>\r\n                    <th>Qustion</th>\r\n                    <th>Answer</th>\r\n                    <th>Grade</th>\r\n                    <th>Updated</th>\r\n                    <th><button>add card</button></th>\r\n                </tr>\r\n                {cards.map((c) => (\r\n                    <tr>\r\n                        <td align=\"center\">{c.question}</td>\r\n                        <td align=\"center\">{c.answer}</td>\r\n                        <td align=\"center\">{c.grade}</td>\r\n                        <td align=\"center\">{c.updated}</td>\r\n                        <td align=\"center\">\r\n                            <button>show answer</button>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </table>\r\n            <div>1,2,3,4...5</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards\r\n","import {\r\n    authAPI,\r\n    createCardsPackType, initCardsPack, ResponseCardsType\r\n} from \"../../a3-dal/mainAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setCommonRegister} from \"./mainAuthReducer\";\r\n\r\ntype ActionType = getCardsType|getCardType\r\ntype getCardsType = ReturnType<typeof getCardsPack>\r\n\r\n\r\ntype getCardType = ReturnType<typeof getCards>\r\n\r\ntype initStateType = {\r\n    cardsPack:Array<initCardsPack>\r\n    cardPacksTotalCount:number;\r\n    maxCardsCount:number;\r\n    minCardsCount:number;\r\n    page:number;\r\n    pageCount:number;\r\n}\r\nconst initialState:initStateType = {\r\n    cardsPack:[{\r\n        name:'HELLO',\r\n        _id:'',\r\n        user_id:'',\r\n        cardsCount:5\r\n    }],\r\n    cardPacksTotalCount:14,\r\n    maxCardsCount:4,\r\n    minCardsCount:1,\r\n    page:0,\r\n    pageCount:4,\r\n}\r\nexport const cardsPackReducer = (\r\n    state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'GET-CARDS-PACK':\r\n            return {...state, cardsPack:action.cardsPack}\r\n        case \"GET-CARD\":\r\n            return {...state}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nconst getCardsPack = (cardsPack: initCardsPack[]) => {\r\n    return {\r\n        type: 'GET-CARDS-PACK',\r\n        cardsPack\r\n    } as const\r\n}\r\n\r\nconst getCards = (id:string) => {\r\n    return{\r\n        type:'GET-CARD',\r\n        id\r\n    } as const\r\n}\r\n\r\nexport const SetPackCards = () => (dispatch: Dispatch) => {\r\n    authAPI.setCardsPack().\r\n    then((res) => {\r\n        dispatch(getCardsPack(res.data.cardsPack))\r\n    }).catch((e) => {\r\n        const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n        console.log(\"Error:\", {...e})\r\n        dispatch(setCommonRegister(error))\r\n    })\r\n}\r\nexport const setNewCardsPack = (name:string) => (dispatch: ThunkDispatch<ResponseCardsType, AppRootStateType, ActionType>, getState: () => AppRootStateType) => {\r\n    authAPI.createCardsPack(name).then((res) => {\r\n        dispatch(SetPackCards())\r\n    }).catch((e) => {\r\n        const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n        console.log(\"Error:\", {...e})\r\n    })\r\n}\r\nexport const removeCardPackTC = () => (dispatch:ThunkDispatch<ResponseCardsType, AppRootStateType, ActionType>) => {\r\n    authAPI.deletePack().then(()=>{\r\n        dispatch(SetPackCards())\r\n    })\r\n}\r\nexport const updateCardPack = (id:string,name:string) => (dispatch:ThunkDispatch<ResponseCardsType, AppRootStateType, ActionType>) =>{\r\n    authAPI.updatePack(id,name).then((res)=>{\r\n        dispatch(SetPackCards())\r\n    })\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from 'react'\r\ntype addNewPackType = {\r\n    newCardPack:(title:string) => void;\r\n}\r\nconst AddNewPack = (props:addNewPackType) => {\r\n    const [newTitle, setNewTitle] = useState<string>('')\r\n\r\n    const onChangeTitle = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const addPackHandler = () => {\r\n        props.newCardPack(newTitle)\r\n    }\r\n    return(\r\n        <div>\r\n            <input type=\"text\" value={newTitle} onChange={onChangeTitle}/>\r\n            <button onClick={addPackHandler}> add </button>\r\n        </div>\r\n    )\r\n}\r\nexport default AddNewPack","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport {CardsPackType, initCardsPack} from \"../../n1-main/a3-dal/mainAPI\";\r\nimport {\r\n    removeCardPackTC,\r\n    setNewCardsPack,\r\n    SetPackCards,\r\n    updateCardPack\r\n} from \"../../n1-main/a2-bll/store/cardsPackReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport AddNewPack from \"./AddNewPack\";\r\nimport {AppRootStateType} from \"../../n1-main/a2-bll/store/store\";\r\nimport {current} from \"@reduxjs/toolkit\";\r\n\r\ntype ContainerCardsPackType = {\r\n    cardsPack:initCardsPack\r\n    newCardPack:(title:string,pack:CardsPackType) => void;\r\n}\r\n\r\nconst CardsPack = (props:ContainerCardsPackType) => {\r\n    const namePack = useSelector<AppRootStateType,initCardsPack[]>(state => state.cardsPack.cardsPack)\r\n    const dispatch = useDispatch()\r\n    const [newTitle, setNewTitle] = useState<string>('')\r\n    useEffect(()=>{\r\n        dispatch(SetPackCards())\r\n    },[])\r\n    const onChangeTitle = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    const updateTitle = () => {\r\n        dispatch(updateCardPack('60e786e0149b3c1a948051c5', newTitle))\r\n    }\r\n    const newCardPack = useCallback((title:string)=>{\r\n        dispatch(setNewCardsPack(title))\r\n    },[dispatch])\r\n    const delPack = ()=>{\r\n        dispatch(removeCardPackTC())\r\n    }\r\n    return(\r\n        <div>\r\n            <AddNewPack newCardPack={newCardPack}/>\r\n            <input type=\"text\" value={newTitle} onChange={onChangeTitle}/>\r\n            <button onClick={updateTitle}>changeName</button>\r\n            <div>\r\n                <button onClick={delPack}>del </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CardsPack","import { Redirect, Route, Switch } from \"react-router-dom\"\r\nimport Profile from \"../../../n2-features/profile/Profile\"\r\nimport Error from \"../../../n2-features/b4-errors/error/Error\"\r\nimport React from \"react\"\r\nimport RenewalPass from \"../../../n2-features/b3-pass/Password/RenewalPass\"\r\nimport SignInWithFormik from \"../../../n2-features/b2-auth/sign-in-up/SignIn\"\r\nimport SignUp from \"../../../n2-features/b2-auth/sign-in-up/SignUp\"\r\nimport NewPass from \"../../../n2-features/b3-pass/Password/NewPass\"\r\nimport UpdateProfile from \"../../../n2-features/profile/UpdateProfile\"\r\nimport Packs from \"../../../n2-features/cards/Packs\"\r\nimport Cards from \"../../../n2-features/cards/card/Cards\"\r\nimport CardsPack from \"../../../n2-features/b5-cardsPack/CardsPack\";\r\n\r\nexport const PATH = {\r\n    PROFILE: \"/profile\",\r\n    SIGN_IN: \"/sign-in\",\r\n    SIGN_UP: \"/sign-up\",\r\n    NEW_PASS: \"/new-pass/:token?\",\r\n    RENEWAL_PASS: \"/renewal-pass\",\r\n    ERROR: \"/404\",\r\n    UPDATE_USER: \"/update-user\",\r\n    PACKS:\"/packs\",\r\n    CARDS:\"/cards\",\r\n    PACKS_RAW:\"/packs-raw\"\r\n}\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={\"/\"} exact component={Profile} />\r\n                <Route path={PATH.PROFILE} component={Profile} />\r\n                <Route path={PATH.PROFILE} component={Error} />\r\n                <Route path={PATH.SIGN_IN} component={SignInWithFormik} />\r\n                <Route path={PATH.SIGN_UP} component={SignUp} />\r\n                <Route path={PATH.NEW_PASS} component={NewPass} />\r\n                <Route path={PATH.RENEWAL_PASS} component={RenewalPass} />\r\n                <Route path={PATH.UPDATE_USER} component={UpdateProfile} />\r\n                <Route path={PATH.PACKS} component={Packs} />\r\n                <Route path={PATH.CARDS} component={Cards} />\r\n                <Route path={PATH.PACKS_RAW} component={CardsPack} />\r\n                <Route path={\"/404\"} render={() => <h1>404:PAGE NOT FOUND</h1>} />\r\n                <Redirect from={\"*\"} to={PATH.ERROR} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n","import { Button } from '@material-ui/core';\r\nimport React, { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { LogoutTC } from '../../../n1-main/a2-bll/store/mainAuthReducer';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst Logout = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(LogoutTC())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={logoutHandler}>Logout<ExitToAppIcon/></Button>\r\n        </div>\r\n    )\r\n}\r\nexport default Logout","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport s from \"./Header.module.css\"\r\nimport { PATH } from \"../routes/Routes\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../../a2-bll/store/store\"\r\nimport Logout from \"../../../n2-features/b2-auth/sign-in-up/Logout\"\r\nimport { Avatar, Button } from \"@material-ui/core\"\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\"\r\nimport SettingsIcon from \"@material-ui/icons/Settings\"\r\nimport VpnKeyIcon from \"@material-ui/icons/VpnKey\"\r\n\r\nfunction Header() {\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n\r\n    return (\r\n        <>\r\n            {isLogged && (\r\n                <nav className={s.nav}>\r\n                    <div>\r\n                        <NavLink to={PATH.PROFILE} replace>\r\n                            <Avatar>\r\n                                <PermIdentityIcon />\r\n                            </Avatar>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={s.headerLink}>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.PROFILE} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <PermIdentityIcon />\r\n                                    My Profile{\" \"}\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.NEW_PASS} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <VpnKeyIcon />\r\n                                    New Password\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.UPDATE_USER} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <SettingsIcon /> Settings{\" \"}\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.PACKS} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <SettingsIcon /> PACKS{\" \"}\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.PACKS_RAW} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <SettingsIcon /> PACKS-RAW{\" \"}\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <Logout />\r\n                    </div>\r\n                </nav>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect } from \"react\"\r\nimport { HashRouter, Redirect } from \"react-router-dom\"\r\nimport \"./App.css\"\r\nimport { PATH, Routes } from \"./routes/Routes\"\r\nimport Header from \"./header/Header\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../a2-bll/store/store\"\r\nimport { isInitializedTC } from \"../a2-bll/store/mainAuthReducer\"\r\nimport Loading from \"./loading/Loading\"\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.auth.isInitialized\r\n    )\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    useEffect(() => {\r\n        dispatch(isInitializedTC())\r\n    }, [])\r\n    if (!isInitialized) return <Loading />\r\n\r\n    return (\r\n        <HashRouter>\r\n            {!isLogged && <Redirect to={PATH.SIGN_IN} />}\r\n            <div className={\"mainPage\"}>\r\n                <Header />\r\n                <Routes />\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { cardsPackReducer } from './cardsPackReducer'\r\nimport {applyMiddleware, combineReducers,createStore} from 'redux';\r\nimport {authReducer} from \"./mainAuthReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { configureStore} from '@reduxjs/toolkit';\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\nconst rootReducer = combineReducers({\r\n    auth:authReducer,\r\n    cardsPack: cardsPackReducer\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nwindow.store = store\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './n1-main/a1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./n1-main/a2-bll/store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__2U9p-\",\"item\":\"Header_item__OvyLV\",\"activeLink\":\"Header_activeLink__J-tfk\",\"headerLink\":\"Header_headerLink__JaHlB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"SignIn_paper__3OOzW\",\"avatarConatiner\":\"SignIn_avatarConatiner__2_AXx\",\"avatar\":\"SignIn_avatar__2bvgE\",\"typographyContainer\":\"SignIn_typographyContainer__Je0UN\",\"form\":\"SignIn_form__1C_Fz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authBlock\":\"CommonStylesForAuth_authBlock__exBWM\",\"inputBlock\":\"CommonStylesForAuth_inputBlock__2_2J5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Profile_root__cO2eh\",\"media\":\"Profile_media__1gpin\",\"updateProfile\":\"Profile_updateProfile__1ZEwx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__eiBUH\",\"red\":\"SuperButton_red__2rcg3\",\"button\":\"SuperButton_button__1L-zn\",\"blink\":\"SuperButton_blink__1ylgH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__36X5A\",\"spanClassName\":\"SuperCheckbox_spanClassName__1lt84\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadPage\":\"Loading_loadPage__2XWob\",\"loader\":\"Loading_loader__Jv6tv\",\"rotate\":\"Loading_rotate__3BzCn\"};"],"sourceRoot":""}