{"version":3,"sources":["n3-MySuperComponents/SuperInputText/SuperInputText.module.css","n1-main/a3-dal/mainAPI.ts","n1-main/a2-bll/store/cardPacksReducer.ts","n1-main/a2-bll/store/appReducer.ts","n1-main/a2-bll/store/mainAuthReducer.ts","n2-features/b6-profile/Profile.tsx","n2-features/b4-errors/error/Error.tsx","n2-features/b3-pass/Password/RenewalPass.tsx","n3-MySuperComponents/SuperButton/SuperButton.tsx","n3-MySuperComponents/SuperInputText/SuperInputText.tsx","n3-MySuperComponents/SuperCheckbox/SuperCheckbox.tsx","n1-main/a1-ui/loading/Loading.tsx","n2-features/b2-auth/sign-in-up/SignIn.tsx","n2-features/b2-auth/sign-in-up/SignUp.tsx","n2-features/b3-pass/Password/NewPass.tsx","n2-features/b6-profile/UpdateProfile.tsx","n1-main/a2-bll/store/cardsReducer.ts","n3-MySuperComponents/SuperPaginator/SuperPaginator.tsx","n1-main/a3-dal/GradeAPI.ts","n1-main/a2-bll/store/cardsGradeReducer.ts","n2-features/b7-modal/ShowAnswerModal.tsx","n2-features/b5-cardsPack/Cards/Cards.tsx","n2-features/b5-cardsPack/cardsPacksPage/CardsPack.tsx","n2-features/b5-cardsPack/cardsPacksPage/CreateCardsPack.tsx","n2-features/b5-cardsPack/cardsPacksPage/SearchPack.tsx","n2-features/b5-cardsPack/cardsPacksPage/CardPacksPage.tsx","n1-main/a1-ui/routes/Routes.tsx","n2-features/b2-auth/sign-in-up/Logout.tsx","n1-main/a1-ui/header/Header.tsx","n1-main/a1-ui/App.tsx","reportWebVitals.ts","n1-main/a2-bll/store/store.ts","index.tsx","n2-features/b2-auth/sign-in-up/SignIn.module.css","n1-main/a1-ui/header/Header.module.css","n3-MySuperComponents/SuperPaginator/SuperPaginator.module.scss","utils/styles/CommonStylesForAuth.module.css","n2-features/b5-cardsPack/Cards/Cards.module.scss","n2-features/b6-profile/Profile.module.css","n3-MySuperComponents/SuperButton/SuperButton.module.css","n2-features/b5-cardsPack/cardsPacksPage/CardsPacks.module.scss","n3-MySuperComponents/SuperCheckbox/SuperCheckbox.module.css","n1-main/a1-ui/loading/Loading.module.css"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","data","delete","put","message","resetPasswordToken","cardsPacksAPI","getModule","get","name","cardsPack","idPack","id","_id","cardsAPI","getCardsModule","getPackCards","createAsyncThunk","getPacksData","thunkAPI","a","params","pageCount","sortPacks","getState","auth","cardPacks","page","newPageForShow","min","minCardsCount","max","maxCardsCount","sortCardsPacks","showMyCardsPacks","user_id","user","dispatch","switchLoadingState","valueInLoading","res","getCardPacks","newState","error","console","log","setCommonRegister","removeCardPack","removePackData","deletedPack","deleted","createCardPack","createData","newName","updateCardPack","updateData","newTitle","slice","createSlice","initialState","cardPacksTotalCount","currentPortionToPaginator","packDeleted","reducers","state","action","payload","isShow","changeNewPageForShowPacks","newShowPage","changePortionPacks","currentPortion","changeMaxMinCards","newValue","changeSort","cardPacksReducer","reducer","actions","isInitializedTC","param","logIn","value","setUser","stateInitialized","isInitialized","loadingProgress","extraReducers","builder","addCase","fulfilled","appReducer","signUp","registsData","addedUser","switchIsRegister","newValueIsRegister","login","loginData","thunAPI","logout","logoutData","info","getUser","getUserData","avatar","updateUserInfo","updateUserData","setUpdateUser","forgot","fogotData","switchFogot","newFogot","newPassword","newPasswordData","setNewPassword","isUpPassword","isLogged","isRegister","commonError","isUpdatedPassword","fogot","updatedUser","authReducer","Profile","useDispatch","userName","useSelector","userEmail","userAvatar","useEffect","Card","className","s","root","CardActionArea","CardMedia","media","image","title","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","to","PATH","SIGN_IN","Error","RenewalPass","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","resetForm","styles","authBlock","handleSubmit","inputBlock","TextField","placeholder","fullWidth","onChange","handleChange","type","style","SuperButton","red","restProps","finalClassName","default","SuperInputText","onChangeText","onKeyPress","onEnter","spanClassName","finalSpanClassName","margin","required","label","e","currentTarget","key","SuperCheckbox","onChangeChecked","children","finalInputClassName","checkbox","FormControlLabel","control","Checkbox","checked","Loading","loadPage","loader","SignInWithFormik","length","PROFILE","Container","maxWidth","paper","avatarConatiner","Avatar","typographyContainer","form","noValidate","getFieldProps","touched","Grid","container","item","xs","RENEWAL_PASS","SIGN_UP","SignUp","confPass","NewPass","token","useParams","UpdateProfile","oldName","oldAva","useState","setNewName","setNewAva","newData","updateProfile","onClick","getCardsForCardsPack","cards","cardsPack_id","packID","getCards","response","cardsTotalCount","maxGrade","minGrade","packUserId","changeNewPageForShowCards","changePortionCards","cardsReducer","SuperPaginator","props","Math","ceil","totalItemsCount","pageSize","i","push","portionCount","portionSize","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","paginatorBody","disabled","buttons","filter","p","map","pageStyle","currentPage","pageActive","numberPageStyle","onClickToPage","gradeAPI","grade","card_id","updatedGrade","shots","rand","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","position","width","backgroundColor","border","boxShadow","shadows","padding","spacing","ShowAnswerModal","classes","React","modalStyle","open","setOpen","handleClose","cardsGrade","numQA","setNumQA","numQ","setNumQ","countA","setCountA","show","setShow","startAgain","newGradesForQuestions","then","getGradeAC","getGradeTC","body","el","question","answer","floor","Modal","onClose","aria-labelledby","aria-describedby","Cards","userId","app","cardsState","NamePack","find","history","useHistory","PACKS","cardsBlock","controlBlock","namePack","buttonBlock","cellPadding","c","align","alert","created","updated","CardsPack","cardsCount","CreateCardsPack","newCardPack","useCallback","NameNewCardsPack","SearchPack","minValue","minCount","maxValue","maxCount","changeMaxMinRange","Slider","event","setValue","valueLabelDisplay","getAriaValueText","CardPacksPage","cardPacksState","updateTitle","delPack","setChecked","changeSortCardsPacks","cardsPacksBlock","searchBlock","newIsDoneValue","NEW_PASS","ERROR","UPDATE_USER","CARDS","PACKS_RAW","QUIZ","Routes","path","exact","render","from","Logout","logoutHandler","Header","nav","replace","headerLink","activeClassName","activeLink","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cba2cf58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__1Gc67\",\"errorInput\":\"SuperInputText_errorInput__2sjb_\",\"error\":\"SuperInputText_error__1oSiw\"};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<ResponseType<{ body: loginResponseType }>>(\"auth/login\", {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n        })\r\n    },\r\n    getProfile() {\r\n        return instance.post<userType>(\"auth/me\")\r\n    },\r\n    signUp(data: signUpDataType) {\r\n        return instance.post<signUpResponseType>(\"auth/register\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<logoutResponseType>(\"auth/me\")\r\n    },\r\n    updateUser(data: NewUserType) {\r\n        return instance.put<updatedUserResponseType>(\"auth/me\", data)\r\n    },\r\n    forgot(email: string, message: string) {\r\n        return instance.post<SendNewPassResponseType>(\"auth/forgot\", { email, message })\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<SendNewPassResponseType>(\"auth/set-new-password\", {\r\n            password,\r\n            resetPasswordToken,\r\n        })\r\n    },\r\n}\r\nexport const cardsPacksAPI = {\r\n    getCardsPacks(getModule: GetCardsPacksModuleType) {\r\n        return instance.get<ResponseGetCardPacksType>(`cards/pack`, getModule)\r\n    },\r\n    createCardsPack(name: string) {\r\n        return instance.post<CreateCardsPackResponceType>(`cards/pack`, {\r\n            cardsPack: { name: name },\r\n        })\r\n    },\r\n    deleteCardsPack(idPack: string) {\r\n        return instance.delete<DeleteCardPackResponceType>(`cards/pack/?id=${idPack}`)\r\n    },\r\n    updateCardsPack(id: string, name: string) {\r\n        return instance.put<UpdateCardsPackResponceType>(`cards/pack`, {\r\n            cardsPack: { _id: id, name: name },\r\n        })\r\n    },\r\n    updateGrade(card_id: string, grade: number) {\r\n        return instance.put<CardType>(\"cards/grade\", { card_id, grade })\r\n    },\r\n}\r\nexport const cardsAPI = {\r\n    getCards(getCardsModule: GetCardsModuleType) {\r\n        return instance.get<GetCardsResponceType>(`cards/card`, getCardsModule)\r\n    },\r\n    createCard(createModule: CreateCardModuleType) {\r\n        return instance.post<CreateCardResponceType>(\"cards/card\", createModule)\r\n    },\r\n    updateCard(updateModule: UpdateCardModuleType) {\r\n        return instance.put<UpdateCardResponceType>(\"cards/card\", updateModule)\r\n    },\r\n    deleteCard(cardId: string) {\r\n        return instance.delete<DeleteCardResponceType>(`cards/card?id=${cardId}`)\r\n    },\r\n}\r\n\r\n\r\n\r\nexport type GetCardsModuleType = {\r\n    params: {\r\n        cardsPack_id: string\r\n        min?: number\r\n        max?: number\r\n        sortCards?: \"0grade\"\r\n        page?: number\r\n        pageCount?: number\r\n    }\r\n}\r\nexport type CardType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    shots: number\r\n    user_id: string\r\n    card_id: string\r\n}\r\nexport type GetCardsPacksModuleType = {\r\n    params: {\r\n        min?: number\r\n        max?: number\r\n        sortPacks?: \"0updated\" | \"1updated\" | \"0cardsCount\" | \"1cardsCount\"\r\n        page?: number\r\n        pageCount?: number\r\n        user_id?: string\r\n    }\r\n}\r\nexport type CreateCardResponceType = {\r\n    newCard: {}\r\n}\r\nexport type UpdateCardResponceType = {\r\n    updateCard: {}\r\n}\r\nexport type DeleteCardResponceType = {\r\n    deleteCard: {}\r\n}\r\nexport type CreateCardsPackResponceType = {\r\n    newCardsPack: {}\r\n}\r\nexport type UpdateCardsPackResponceType = {\r\n    updateCardsPack: {}\r\n}\r\nexport type DeleteCardPackResponceType = {\r\n    deleteCardsPack: {}\r\n}\r\nexport type CardsType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    shots: number\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    _id: string\r\n}\r\nexport type GetCardsResponceType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type CreateCardModuleType = {\r\n    card: {\r\n        cardsPack_id: string\r\n        question: string\r\n        answer: string\r\n        grade: number\r\n        shots: number\r\n        answerImg?: string\r\n        questionImg?: string\r\n        questionVideo?: string\r\n        answerVideo?: string\r\n        _id: string\r\n    }\r\n}\r\nexport type UpdateCardModuleType = {\r\n    card: {\r\n        _id: string\r\n        question?: string\r\n    }\r\n}\r\nexport type createCardPackType = {\r\n    name: string\r\n    private: boolean\r\n}\r\nexport type initCardPacks = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    cardsCount: number\r\n    created?: string\r\n    updated?: string\r\n}\r\nexport type ResponseGetCardPacksType = {\r\n    cardPacks: Array<initCardPacks>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}\r\nexport type CardPackType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: number | string\r\n    page: number\r\n    pageCount: number\r\n    user_id: string\r\n}\r\nexport type NewUserType = {\r\n    name: string\r\n    avatar: string\r\n}\r\ntype updatedUserResponseType = {\r\n    updatedUser: {}\r\n    error?: string\r\n}\r\ntype logoutResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\ntype SendNewPassResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\ntype signUpResponseType = {\r\n    addedUser: {}\r\n    error?: string\r\n}\r\ntype signUpDataType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\nexport type SignInType<T = {}> = {\r\n    data: signUpDataType\r\n    rememberMe: boolean\r\n}\r\nexport type userType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar: string\r\n    error?: string\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    error?: string\r\n    body: loginResponseType\r\n}\r\ntype loginResponseType = {\r\n    data: userType\r\n    created: any\r\n    updated: any\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n}\r\n","import {\r\n    cardsPacksAPI,\r\n    GetCardsPacksModuleType,\r\n    initCardPacks,\r\n    ResponseGetCardPacksType,\r\n} from \"../../a3-dal/mainAPI\"\r\nimport { AuthInitStateType, setCommonRegister } from \"./mainAuthReducer\"\r\nimport { switchLoadingState } from \"./appReducer\"\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\nexport type initCardsPacksStateType = {\r\n    cardPacks: Array<initCardPacks>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    showMyCardsPacks: boolean\r\n    newPageForShow: number\r\n    currentPortionToPaginator: number\r\n    sortCardsPacks: \"0updated\" | \"1updated\" | \"0cardsCount\" | \"1cardsCount\"\r\n    packDeleted: boolean\r\n}\r\nconst cardPacksInitialState: initCardsPacksStateType = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: 14,\r\n    maxCardsCount: 4,\r\n    minCardsCount: 1,\r\n    page: 0,\r\n    pageCount: 4,\r\n    showMyCardsPacks: false,\r\n    newPageForShow: 1,\r\n    currentPortionToPaginator: 1,\r\n    sortCardsPacks: \"0cardsCount\",\r\n    packDeleted: false,\r\n}\r\nexport const getPackCards = createAsyncThunk(\"cardPacks/get\", async (getPacksData, thunkAPI) => {\r\n    const module: GetCardsPacksModuleType = {\r\n        params: {\r\n            pageCount: 10,\r\n            sortPacks: \"0cardsCount\",\r\n        },\r\n    }\r\n    const { auth } = thunkAPI.getState() as { auth: AuthInitStateType }\r\n    const { cardPacks } = thunkAPI.getState() as { cardPacks: initCardsPacksStateType }\r\n    //\r\n    module.params.page = cardPacks.newPageForShow\r\n    module.params.min = cardPacks.minCardsCount\r\n    module.params.max = cardPacks.maxCardsCount\r\n    module.params.sortPacks = cardPacks.sortCardsPacks\r\n    if (cardPacks.showMyCardsPacks) {\r\n        module.params.user_id = auth.user._id\r\n    } else {\r\n        module.params.user_id = \"\"\r\n    }\r\n    //\r\n    thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n    try {\r\n        const res = await cardsPacksAPI.getCardsPacks(module)\r\n        thunkAPI.dispatch(getCardPacks({ newState: res.data }))\r\n    } catch (e) {\r\n        const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n        console.log(\"Error:\", { ...e })\r\n        thunkAPI.dispatch(setCommonRegister(error))\r\n    }\r\n    thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n})\r\nexport const removeCardPack = createAsyncThunk(\r\n    \"cardPacks/removeCardPack\",\r\n    async (removePackData: { idPack: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            await cardsPacksAPI.deleteCardsPack(removePackData.idPack)\r\n            thunkAPI.dispatch(deletedPack({ deleted: true }))\r\n            thunkAPI.dispatch(getPackCards())\r\n            thunkAPI.dispatch(deletedPack({ deleted: false }))\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunkAPI.dispatch(setCommonRegister(error))\r\n        }\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\nexport const createCardPack = createAsyncThunk(\r\n    \"cardPacks/setNewCardPack\",\r\n    async (createData: { newName: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            await cardsPacksAPI.createCardsPack(createData.newName)\r\n            thunkAPI.dispatch(getPackCards())\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n        }\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\nexport const updateCardPack = createAsyncThunk(\r\n    \"cardPacks/update\",\r\n    async (updateData: { idPack: string; newTitle: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            await cardsPacksAPI.updateCardsPack(updateData.idPack, updateData.newTitle)\r\n            thunkAPI.dispatch(getPackCards())\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n        }\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\n\r\nconst slice = createSlice({\r\n    name: \"cardPacks\",\r\n    initialState: cardPacksInitialState,\r\n    reducers: {\r\n        getCardPacks(state, action: PayloadAction<{ newState: ResponseGetCardPacksType }>) {\r\n            state.cardPacks = action.payload.newState.cardPacks\r\n            state.cardPacksTotalCount = action.payload.newState.cardPacksTotalCount\r\n            state.maxCardsCount = action.payload.newState.maxCardsCount\r\n            state.minCardsCount = action.payload.newState.minCardsCount\r\n            state.page = action.payload.newState.page\r\n            state.pageCount = action.payload.newState.pageCount\r\n        },\r\n        showMyCardsPacks(state, action: PayloadAction<{ isShow: boolean }>) {\r\n            state.showMyCardsPacks = action.payload.isShow\r\n        },\r\n        changeNewPageForShowPacks(state, action: PayloadAction<{ newShowPage: number }>) {\r\n            state.newPageForShow = action.payload.newShowPage\r\n        },\r\n        changePortionPacks(state, action: PayloadAction<{ currentPortion: number }>) {\r\n            state.currentPortionToPaginator = action.payload.currentPortion\r\n        },\r\n        changeMaxMinCards(state, action: PayloadAction<{ newValue: number[] }>) {\r\n            state.minCardsCount = action.payload.newValue[0]\r\n            state.maxCardsCount = action.payload.newValue[1]\r\n        },\r\n        changeSort(\r\n            state,\r\n            action: PayloadAction<{\r\n                newValue: \"0updated\" | \"1updated\" | \"0cardsCount\" | \"1cardsCount\"\r\n            }>\r\n        ) {\r\n            state.sortCardsPacks = action.payload.newValue\r\n        },\r\n        deletedPack(state, action: PayloadAction<{ deleted: boolean }>) {\r\n            state.packDeleted = action.payload.deleted\r\n        },\r\n    },\r\n})\r\n\r\nexport const cardPacksReducer = slice.reducer\r\nexport const {\r\n    getCardPacks,\r\n    showMyCardsPacks,\r\n    changeNewPageForShowPacks,\r\n    changePortionPacks,\r\n    changeMaxMinCards,\r\n    changeSort,\r\n    deletedPack,\r\n} = slice.actions\r\n","import { FormatColorResetRounded } from \"@material-ui/icons\"\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { authAPI } from \"../../a3-dal/mainAPI\"\r\nimport { getPackCards } from \"./cardPacksReducer\"\r\nimport { logIn, setUser } from \"./mainAuthReducer\"\r\n\r\ntype LoadingProgressType = \"loading\" | \"successed\"\r\ntype AppReducerStateType = {\r\n    isInitialized: boolean\r\n    loadingProgress: LoadingProgressType\r\n}\r\nconst appReducerState: AppReducerStateType = {\r\n    isInitialized: false,\r\n    loadingProgress: \"successed\",\r\n}\r\nexport const isInitializedTC = createAsyncThunk(\"app/isInitialized\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n    try {\r\n        const res = await await authAPI.getProfile()\r\n        if (!res.data.error) {\r\n            const user = res.data\r\n            await thunkAPI.dispatch(getPackCards())\r\n            thunkAPI.dispatch(logIn({ value: true }))\r\n            thunkAPI.dispatch(setUser({ user }))\r\n        } else {\r\n            thunkAPI.dispatch(logIn({ value: false }))\r\n        }\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    } catch {}\r\n    return { stateInitialized: true }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: appReducerState,\r\n    reducers: {\r\n        switchLoadingState(state, action: PayloadAction<{ valueInLoading: LoadingProgressType }>) {\r\n            state.loadingProgress = action.payload.valueInLoading\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(isInitializedTC.fulfilled, (state, action) => {\r\n            if (action.payload?.stateInitialized) {\r\n                state.isInitialized = action.payload?.stateInitialized\r\n            }\r\n        })\r\n    },\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const { switchLoadingState } = slice.actions\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { authAPI, NewUserType, userType } from \"../../a3-dal/mainAPI\"\r\nimport { switchLoadingState } from \"./appReducer\"\r\n\r\nexport type AuthInitStateType = {\r\n    isLogged: boolean\r\n    user: userType\r\n    isRegister: boolean\r\n    commonError: string\r\n    isUpdatedPassword: boolean\r\n    fogot: boolean\r\n    updatedUser: NewUserType\r\n}\r\nconst authInitialState: AuthInitStateType = {\r\n    isLogged: false,\r\n    user: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n    isRegister: false,\r\n    commonError: \"\",\r\n    isUpdatedPassword: false,\r\n    fogot: false,\r\n    updatedUser: {\r\n        name: \"\",\r\n        avatar: \"\",\r\n    },\r\n}\r\n//\r\nexport const signUp = createAsyncThunk(\r\n    \"auth/signUp\",\r\n    async (registsData: { email: string; password: string }, thunkAPI) => {\r\n        try {\r\n            const res = await authAPI.signUp(registsData)\r\n            if (res.data.addedUser) {\r\n                thunkAPI.dispatch(switchIsRegister({ newValueIsRegister: true }))\r\n            } else {\r\n                thunkAPI.dispatch(setCommonRegister({ error: res.data.error }))\r\n            }\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunkAPI.dispatch(setCommonRegister(error))\r\n        }\r\n    }\r\n)\r\nexport const login = createAsyncThunk(\r\n    \"auth/login\",\r\n    async (loginData: { email: string; password: string; rememberMe: boolean }, thunAPI) => {\r\n        thunAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            await authAPI.login(loginData.email, loginData.password, loginData.rememberMe)\r\n            thunAPI.dispatch(logIn({ value: true }))\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunAPI.dispatch(setCommonRegister({ error: error }))\r\n        }\r\n        thunAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\nexport const logout = createAsyncThunk(\"auth/logout\", async (logoutData, thunAPI) => {\r\n    thunAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.info) {\r\n            thunAPI.dispatch(logIn({ value: false }))\r\n        }\r\n    } catch (e) {\r\n        const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n        console.log(\"Error:\", { ...e })\r\n        thunAPI.dispatch(setCommonRegister({ error: error }))\r\n    }\r\n    thunAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n})\r\nexport const getUser = createAsyncThunk(\"auth/getUser\", async (getUserData, thunAPI) => {\r\n    const res = await authAPI.getProfile()\r\n    let { _id, email, name, avatar } = res.data\r\n    thunAPI.dispatch(setUser({ user: { _id, email, name, avatar } }))\r\n})\r\nexport const updateUserInfo = createAsyncThunk(\r\n    \"auth/updateUser\",\r\n    async (updateUserData: { data: NewUserType }, thunkAPI) => {\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            await authAPI.updateUser(updateUserData.data)\r\n            thunkAPI.dispatch(setUpdateUser({ data: updateUserData.data }))\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunkAPI.dispatch(setCommonRegister({ error: error }))\r\n        }\r\n        console.log(\"check profile\")\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\nexport const forgot = createAsyncThunk(\r\n    \"auth/forgot\",\r\n    async (fogotData: { email: string; message: string }, thunAPI) => {\r\n        thunAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            const res = await authAPI.forgot(fogotData.email, fogotData.message)\r\n            if (!res.data.error) {\r\n                thunAPI.dispatch(switchFogot({ newFogot: true }))\r\n            } else {\r\n                thunAPI.dispatch(setCommonRegister({ error: res.data.error }))\r\n            }\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunAPI.dispatch(setCommonRegister({ error: error }))\r\n        }\r\n        thunAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\nexport const newPassword = createAsyncThunk(\r\n    \"auth/newPassword\",\r\n    async (newPasswordData: { newPassword: string; resetPasswordToken: string }, thunAPI) => {\r\n        thunAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            const res = await authAPI.setNewPassword(\r\n                newPasswordData.newPassword,\r\n                newPasswordData.resetPasswordToken\r\n            )\r\n            if (!res.data.error) {\r\n                thunAPI.dispatch(setNewPassword({ isUpPassword: true }))\r\n            } else {\r\n                thunAPI.dispatch(setCommonRegister({ error: res.data.error }))\r\n            }\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunAPI.dispatch(setCommonRegister({ error: error }))\r\n        }\r\n\r\n        thunAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\n//\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: authInitialState,\r\n    reducers: {\r\n        switchIsRegister(state, action: PayloadAction<{ newValueIsRegister: boolean }>) {\r\n            state.isRegister = action.payload.newValueIsRegister\r\n        },\r\n        setCommonRegister(state, action: PayloadAction<{ error: any }>) {\r\n            state.commonError = action.payload.error\r\n        },\r\n        logIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLogged = action.payload.value\r\n        },\r\n        setUser(\r\n            state,\r\n            action: PayloadAction<{\r\n                user: { _id: string; email: string; name: string; avatar: string }\r\n            }>\r\n        ) {\r\n            state.user = action.payload.user\r\n        },\r\n        setUpdateUser(state, action: PayloadAction<{ data: NewUserType }>) {\r\n            state.updatedUser = action.payload.data\r\n        },\r\n        setNewPassword(state, action: PayloadAction<{ isUpPassword: boolean }>) {\r\n            state.isUpdatedPassword = action.payload.isUpPassword\r\n        },\r\n        switchFogot(state, action: PayloadAction<{ newFogot: boolean }>) {\r\n            state.fogot = action.payload.newFogot\r\n        },\r\n    },\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {\r\n    switchIsRegister,\r\n    setCommonRegister,\r\n    logIn,\r\n    setUser,\r\n    setUpdateUser,\r\n    setNewPassword,\r\n    switchFogot,\r\n} = slice.actions\r\n","import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../../n1-main/a2-bll/store/store\"\r\nimport { getUser } from \"../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { PATH } from \"../../n1-main/a1-ui/routes/Routes\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\"\r\nimport CardActions from \"@material-ui/core/CardActions\"\r\nimport CardContent from \"@material-ui/core/CardContent\"\r\nimport CardMedia from \"@material-ui/core/CardMedia\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport s from \"./Profile.module.css\"\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n    const userName = useSelector<AppRootStateType, string>((state) => state.auth.user.name)\r\n    const userEmail = useSelector<AppRootStateType, string>((state) => state.auth.user.email)\r\n    const userAvatar = useSelector<AppRootStateType, string | undefined>(\r\n        (state) => state.auth.user.avatar\r\n    )\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    useEffect(() => {\r\n        dispatch(getUser())\r\n    }, [dispatch])\r\n\r\n    if (!isLogged) {\r\n        return <Redirect to={PATH.SIGN_IN} />\r\n    }\r\n\r\n    return (\r\n        <Card className={s.root}>\r\n            <CardActionArea>\r\n                <CardMedia className={s.media} image={userAvatar} title=\"Contemplative Reptile\" />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        Name: {userName}\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        Email: {userEmail}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime magnam\r\n                        veritatis suscipit. Dolor, quas iste eveniet et saepe quibusdam expedita\r\n                        nihil incidunt quo odio cum culpa, delectus aliquam earum nemo.\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button size=\"small\" color=\"primary\">\r\n                    Learn More\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\n\r\nconst Error = () => {\r\n\r\n    return(\r\n        <div>\r\n            <h1>\r\n\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\nexport default Error","import { Button, TextField } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { forgot } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport styles from \"../../../utils/styles/CommonStylesForAuth.module.css\"\r\nimport KeyboardReturnIcon from \"@material-ui/icons/KeyboardReturn\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nconst RenewalPass = () => {\r\n    const message = `<div style=\"background-color: lime; padding: 15px\"> \r\n    password recovery link: <a href='https://tengrix.github.io/fridayproject/#/new-pass/$token$'>Click to here</a></div>`\r\n    const fogot = useSelector<AppRootStateType, boolean>((state) => state.auth.fogot)\r\n    const commonError = useSelector<AppRootStateType, string>((state) => state.auth.commonError)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Email required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(forgot({ email: values.email, message }))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (fogot)\r\n        return (\r\n            <div className={styles.authBlock}>\r\n                <div>Checked your email!</div>\r\n                <div>\r\n                    <NavLink to={PATH.SIGN_IN}>\r\n                        <Button variant=\"outlined\">\r\n                            <KeyboardReturnIcon />\r\n                        </Button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        )\r\n    return (\r\n        <div className={styles.authBlock}>\r\n            <form onSubmit={formik.handleSubmit} className={styles.inputBlock}>\r\n                <TextField\r\n                    placeholder=\"email\"\r\n                    name=\"email\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\r\n                    Send message\r\n                </Button>\r\n                <NavLink to={PATH.SIGN_IN}>\r\n                    <Button variant=\"outlined\">\r\n                        <KeyboardReturnIcon />\r\n                    </Button>\r\n                </NavLink>\r\n                {formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\r\n                {commonError && <div style={{ color: \"red\" }}>{commonError}</div>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default RenewalPass\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = any\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    type: string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className, type,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.default}${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <Button\r\n            type={type}\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        >Sign In </Button>\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import { TextField } from '@material-ui/core'\r\nimport React, { ChangeEvent, KeyboardEvent } from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = any\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    placeholder: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        placeholder,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n            && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n            && e.key === 'Enter' // и если нажата кнопка Enter\r\n            && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n   /* const finalInputClassName = `${s.errorInput} ${className}` // need to fix with (?:) and s.superInput*/\r\n\r\n    return (\r\n        <>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label={placeholder}\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import { Checkbox, FormControlLabel } from '@material-ui/core'\r\nimport React, { ChangeEvent } from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = any\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <>\r\n            <FormControlLabel\r\n                control={<Checkbox className={finalInputClassName} onChange={onChangeCallback} {...restProps} value=\"remember\" color=\"secondary\" />}\r\n                label=\"Remember me\"\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React from \"react\";\r\nimport s from './Loading.module.css'\r\n\r\nfunction Loading() {\r\n    return (\r\n        <>\r\n            <div className={s.loadPage}>\r\n                <div className={s.loader}>\r\n                    <div>\r\n                        <div>\r\n                            <div>\r\n                                <div>\r\n                                    <div>\r\n                                        <div>\r\n                                            <div>\r\n                                                <div>\r\n                                                    <div></div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Loading","import React from \"react\"\r\nimport SuperButton from \"../../../n3-MySuperComponents/SuperButton/SuperButton\"\r\nimport SuperInputText from \"../../../n3-MySuperComponents/SuperInputText/SuperInputText\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { login } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport SuperCheckbox from \"../../../n3-MySuperComponents/SuperCheckbox/SuperCheckbox\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport { NavLink, Redirect } from \"react-router-dom\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\nimport { useFormik } from \"formik\"\r\nimport s from \"./SignIn.module.css\"\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport { Button } from \"@material-ui/core\"\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\"\r\nimport Loading from \"../../../n1-main/a1-ui/loading/Loading\"\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst SignInWithFormik = () => {\r\n    const dispatch = useDispatch()\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Email required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            } else if (values.password.length < 4) {\r\n                errors.password = \"Invalid password\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(\r\n                login({\r\n                    email: values.email,\r\n                    password: values.password,\r\n                    rememberMe: values.rememberMe,\r\n                })\r\n            )\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLogged) {\r\n        return <Redirect to={PATH.PROFILE} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isLogged ? (\r\n                <Loading />\r\n            ) : (\r\n                <Container component=\"main\" maxWidth=\"xs\">\r\n                    <div className={s.paper}>\r\n                        <div className={s.avatarConatiner}>\r\n                            <Avatar className={s.avatar}>\r\n                                <AccountCircleIcon />\r\n                            </Avatar>\r\n                        </div>\r\n                        <div className={s.typographyContainer}>\r\n                            <Typography component=\"h1\" variant=\"h5\">\r\n                                Sign In\r\n                            </Typography>\r\n                        </div>\r\n\r\n                        <form onSubmit={formik.handleSubmit} className={s.form} noValidate>\r\n                            <SuperInputText\r\n                                placeholder={\"Username or email\"}\r\n                                type={\"email\"}\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email && (\r\n                                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                            )}\r\n\r\n                            <SuperInputText\r\n                                placeholder={\"Password\"}\r\n                                type={\"password\"}\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n\r\n                            {formik.touched.password && formik.errors.password && (\r\n                                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                            )}\r\n\r\n                            <SuperCheckbox\r\n                                type={\"rememberMe\"}\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                            />\r\n\r\n                            <SuperButton type=\"submit\"></SuperButton>\r\n\r\n                            <Grid container>\r\n                                <Grid item xs>\r\n                                    <NavLink to={PATH.RENEWAL_PASS}>\r\n                                        <Button fullWidth variant=\"outlined\">\r\n                                            <span>Forgot password</span>\r\n                                        </Button>\r\n                                    </NavLink>\r\n                                    <NavLink to={PATH.SIGN_UP}>\r\n                                        <Button fullWidth variant=\"outlined\">\r\n                                            Don't have an account? Sign Up\r\n                                        </Button>\r\n                                    </NavLink>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </div>\r\n                </Container>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default SignInWithFormik\r\n","import React from \"react\"\r\nimport { signUp } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Button, TextField } from \"@material-ui/core\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { NavLink, Redirect } from \"react-router-dom\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\nimport { useFormik } from \"formik\"\r\nimport s from \"./SignIn.module.css\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confPass?: string\r\n}\r\n\r\nconst SignUp = () => {\r\n    const isRegister = useSelector<AppRootStateType, boolean>((state) => state.auth.isRegister)\r\n    const commonError = useSelector<AppRootStateType, string>((state) => state.auth.commonError)\r\n    const dispatch = useDispatch()\r\n    const sendDataToRegister = (email: string, password: string) => {\r\n        dispatch(signUp({email, password}))\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            confPass: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Email required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password required\"\r\n            } else if (values.password.length < 7) {\r\n                errors.password = \"Password should be longer 7 symbols\"\r\n            }\r\n            if (values.password !== values.confPass) {\r\n                errors.password = \"Password not identical\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            formik.resetForm()\r\n            sendDataToRegister(values.email, values.password)\r\n        },\r\n    })\r\n    if (isRegister) {\r\n        return <Redirect to={\"/sign-in\"} />\r\n    }\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <div className={s.paper}>\r\n                <div className={s.avatarConatiner}>\r\n                    <Avatar className={s.avatar}>\r\n                        <AccountCircleIcon />\r\n                    </Avatar>\r\n                </div>\r\n                <div className={s.typographyContainer}>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign Up\r\n                    </Typography>\r\n                </div>\r\n                <form onSubmit={formik.handleSubmit} className={s.form} noValidate>\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"Email\"\r\n                        name=\"email\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.email}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email && (\r\n                        <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n                    )}\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.password}\r\n                    />\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        placeholder=\"Confirm password:\"\r\n                        name=\"confPass\"\r\n                        type=\"password\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.confPass}\r\n                    />\r\n\r\n                    {formik.errors.password && (\r\n                        <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                    )}\r\n\r\n                    <Button fullWidth variant=\"contained\" color=\"secondary\">\r\n                        Sign Up\r\n                    </Button>\r\n\r\n                    <div style={{ color: \"red\" }}>{commonError}</div>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <NavLink to={PATH.SIGN_IN}><Button fullWidth variant=\"outlined\">Sign In</Button></NavLink>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\nexport default SignUp\r\n","import { Button, TextField } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect, useParams } from \"react-router-dom\"\r\nimport { newPassword } from \"../../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport styles from \"../../../utils/styles/CommonStylesForAuth.module.css\"\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    confPass?: string\r\n}\r\n\r\nconst NewPass = () => {\r\n    const isUpdatedPassword = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.auth.isUpdatedPassword\r\n    )\r\n    const commonError = useSelector<AppRootStateType, string>((state) => state.auth.commonError)\r\n    const dispatch = useDispatch()\r\n    const { token } = useParams<{ token: string }>()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: \"\",\r\n            confPass: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (values.password.length < 7) {\r\n                errors.password = \"Password should be longer 7 symbols\"\r\n            }\r\n            if (values.password !== values.confPass) {\r\n                errors.password = \"Password not identical\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(newPassword({ newPassword: values.password, resetPasswordToken: token }))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isUpdatedPassword) {\r\n        return <Redirect to={\"/sign-in\"} />\r\n    }\r\n    return (\r\n        <div className={styles.authBlock}>\r\n            <form onSubmit={formik.handleSubmit} className={styles.inputBlock}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Password:\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Confirm password:\"\r\n                    name=\"confPass\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.confPass}\r\n                />\r\n                {formik.errors.password && (\r\n                    <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n                )}\r\n                <Button variant=\"contained\" color=\"secondary\" type={\"submit\"}>\r\n                    Change password\r\n                </Button>\r\n                <div style={{ color: \"red\" }}>{commonError}</div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default NewPass\r\n","import React, { ChangeEvent, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../../n1-main/a2-bll/store/store\"\r\nimport { updateUserInfo } from \"../../n1-main/a2-bll/store/mainAuthReducer\"\r\nimport { NewUserType } from \"../../n1-main/a3-dal/mainAPI\"\r\nimport { TextField } from \"@material-ui/core\"\r\nimport s from \"./Profile.module.css\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nconst UpdateProfile = () => {\r\n    const dispatch = useDispatch()\r\n    const oldName = useSelector<AppRootStateType, string>((state) => state.auth.user.name)\r\n    const oldAva = useSelector<AppRootStateType, string>((state) => state.auth.user.avatar)\r\n    const [name, setNewName] = useState<string>(oldName)\r\n    const [avatar, setNewAva] = useState<string>(oldAva)\r\n    const newData: NewUserType = { name, avatar }\r\n    const changeName = () => {\r\n        dispatch(updateUserInfo({ data: newData }))\r\n    }\r\n    const onChangeName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n    const onChangeAva = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewAva(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.updateProfile}>\r\n            <TextField placeholder={\"New name\"} value={name} type=\"text\" onChange={onChangeName} />\r\n            <TextField\r\n                placeholder={\"New URL for Ava\"}\r\n                value={avatar}\r\n                type=\"text\"\r\n                onChange={onChangeAva}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={changeName}>\r\n                Submit\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateProfile\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { cardsAPI, CardsType, GetCardsModuleType, GetCardsResponceType } from \"../../a3-dal/mainAPI\"\r\nimport { switchLoadingState } from \"./appReducer\"\r\nimport { setCommonRegister } from \"./mainAuthReducer\"\r\n\r\nexport type CardsInitialStateType = {\r\n    cards: Array<CardsType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n    currentPortionToPaginator: number\r\n    newPageForShow: number\r\n}\r\nconst cardsInitialState: CardsInitialStateType = {\r\n    cards: [],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    packUserId: \"\",\r\n    currentPortionToPaginator: 1,\r\n    newPageForShow: 1,\r\n}\r\n\r\nexport const getCardsForCardsPack = createAsyncThunk(\r\n    \"cardPacks/get\",\r\n    async (getPacksData: { packID: string }, thunkAPI) => {\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"loading\" }))\r\n        try {\r\n            const { cards } = thunkAPI.getState() as { cards: CardsInitialStateType }\r\n            const module: GetCardsModuleType = {\r\n                params: {\r\n                    cardsPack_id: getPacksData.packID,\r\n                    page: cards.newPageForShow,\r\n                    pageCount: cards.pageCount,\r\n                },\r\n            }\r\n            const res = await cardsAPI.getCards(module)\r\n            thunkAPI.dispatch(getCards({ response: res.data }))\r\n        } catch (e) {\r\n            const error = e.res ? e.res.data.error : e.message + \", more details in the console\"\r\n            console.log(\"Error:\", { ...e })\r\n            thunkAPI.dispatch(setCommonRegister(error))\r\n        }\r\n        thunkAPI.dispatch(switchLoadingState({ valueInLoading: \"successed\" }))\r\n    }\r\n)\r\n// export const createCard = createAsyncThunk(\r\n//     \"cardPacks/createCard\",\r\n//     async (createCardData: {}, thunkAPI) => {}\r\n// )\r\nconst slice = createSlice({\r\n    name: \"cardPacks\",\r\n    initialState: cardsInitialState,\r\n    reducers: {\r\n        getCards(state, action: PayloadAction<{ response: GetCardsResponceType }>) {\r\n            state.cards = action.payload.response.cards\r\n            state.cardsTotalCount = action.payload.response.cardsTotalCount\r\n            state.maxGrade = action.payload.response.maxGrade\r\n            state.minGrade = action.payload.response.minGrade\r\n            state.packUserId = action.payload.response.packUserId\r\n            state.page = action.payload.response.page\r\n            state.pageCount = action.payload.response.pageCount\r\n        },\r\n        changeNewPageForShowCards(state, action: PayloadAction<{ newShowPage: number }>) {\r\n            state.newPageForShow = action.payload.newShowPage\r\n        },\r\n        changePortionCards(state, action: PayloadAction<{ currentPortion: number }>) {\r\n            state.currentPortionToPaginator = action.payload.currentPortion\r\n        },\r\n    },\r\n})\r\n\r\nexport const cardsReducer = slice.reducer\r\nexport const { getCards, changeNewPageForShowCards, changePortionCards } = slice.actions\r\n","import React, { useState } from \"react\"\r\nimport styles from \"./SuperPaginator.module.scss\"\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    portionSize: number\r\n    currentPortion: number\r\n    onClickToPage: (newCurrentPage: number, currentPortion: number) => void\r\n}\r\n\r\nconst SuperPaginator = (props: PaginatorPropsType) => {\r\n    let page = []\r\n    const pageCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        page.push(i)\r\n    }\r\n    const portionCount = Math.ceil(pageCount / props.portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(props.currentPortion)\r\n    const leftPortionNumber = (portionNumber - 1) * props.portionSize + 1\r\n    const rightPortionNumber = portionNumber * props.portionSize\r\n\r\n    return (\r\n        <div className={styles.paginatorBody}>\r\n            <button\r\n                onClick={() => setPortionNumber(1)}\r\n                disabled={portionNumber == 1}\r\n                className={styles.buttons}\r\n            >\r\n                - -\r\n            </button>\r\n            <button\r\n                onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}\r\n                disabled={portionNumber == 1}\r\n                className={styles.buttons}\r\n            >\r\n                -\r\n            </button>\r\n\r\n            {page\r\n                .filter((p) => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                .map((p) => {\r\n                    const pageStyle = `${props.currentPage === p && styles.pageActive} ${\r\n                        styles.numberPageStyle\r\n                    }`\r\n                    return (\r\n                        <span key={p} onClick={() => props.onClickToPage(p, portionNumber)} className={pageStyle}>\r\n                            {p}\r\n                        </span>\r\n                    )\r\n                })}\r\n\r\n            <button\r\n                onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}\r\n                disabled={portionCount <= portionNumber}\r\n                className={styles.buttons}\r\n            >\r\n                +\r\n            </button>\r\n            <button\r\n                onClick={() => setPortionNumber(portionCount)}\r\n                disabled={portionCount <= portionNumber}\r\n                className={styles.buttons}\r\n            >\r\n                ++\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuperPaginator\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials:true\r\n})\r\n\r\nexport const gradeAPI = {\r\n    grades(grade:number, card_id:string){\r\n        return instance.put<gradeResponseType>(`cards/grade`,{grade,card_id})\r\n    },\r\n    shots(shot:number){\r\n        return instance.put<gradeResponseType>('cards/grade',{shot})\r\n    }\r\n}\r\n\r\nexport type gradeResponseType = {\r\n    _id:string;\r\n    cardsPack_id:string;\r\n    card_id:string;\r\n    user_id:string;\r\n    grade:number;\r\n    shots:number;\r\n}","import {gradeAPI, gradeResponseType} from \"../../a3-dal/GradeAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype initialStateType = {\r\n    updatedGrade:gradeResponseType\r\n}\r\ntype ActionType = ReturnType<typeof getGradeAC>| ReturnType<typeof getShotsAC>\r\n\r\nlet initialState:initialStateType = {\r\n    updatedGrade:{\r\n        _id:'',\r\n        cardsPack_id:'',\r\n        card_id:'5eea471c77e2080004b2dd39',\r\n        user_id:'',\r\n        grade:5,\r\n        shots:0\r\n    }\r\n}\r\nexport const gradeReducer = (state=initialState, action:ActionType) => {\r\n    switch (action.type){\r\n        case \"GET-GRADE\":\r\n            return{...state, grade: action.grade, id:action.id}\r\n        case \"GET-SHOTS\":\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getGradeAC = (grade:number, id:string) => {\r\n    return{\r\n        type:'GET-GRADE',\r\n        grade,id\r\n    }as const\r\n}\r\nconst getShotsAC = (shots:number) => {\r\n    return{\r\n        type:'GET-SHOTS',\r\n        shots\r\n    }as const\r\n}\r\nexport const getGradeTC = (grade:number, card_id:string) =>  (dispatch:Dispatch) =>{\r\n   gradeAPI.grades(grade, card_id).then((res)=>{\r\n       dispatch(getGradeAC(res.data.grade, res.data.card_id))\r\n   })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport Modal from \"@material-ui/core/Modal\"\r\nimport { Button, Checkbox, ListItem } from \"@material-ui/core\"\r\nimport { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../../n1-main/a2-bll/store/store\"\r\nimport { useState } from \"react\"\r\nimport { getGradeTC } from \"../../n1-main/a2-bll/store/cardsGradeReducer\"\r\nimport { ListItemText } from \"@material-ui/core\"\r\nimport {CardsType} from \"../../n1-main/a3-dal/mainAPI\";\r\n\r\ntype ShowAnswerModalType = {\r\n    name: string\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand()\r\n    const left = 50 + rand()\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: \"absolute\",\r\n        width: 500,\r\n        backgroundColor: \"lightpink\",\r\n        border: \"2px solid #000\",\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}))\r\n\r\nexport default function ShowAnswerModal(props: ShowAnswerModalType) {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n\r\n    const [modalStyle] = React.useState(getModalStyle)\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    //   useEffect(() => {\r\n    //     dispatch(updateGradeTc(4, \"60abbfbd6a39d35b188ef6f2\"))\r\n    // }, [dispatch])\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    // const [questions, setQuestion] = useState<any>([\r\n    //     [\"What is React?\", 0],\r\n    //     [\"What is Redux?\", 0],\r\n    //     [\"What is promises?\", 0],\r\n    //     [\"What is closure?\", 0],\r\n    //     [\"Functional or Class?\", 0],\r\n    // ])\r\n    // const [answers, setAnswers] = useState<string[]>([\r\n    //     \"React is a declarative, efficient, \" +\r\n    //         \"and flexible JavaScript library for building user interfaces. \" +\r\n    //         \"It lets you compose complex UIs from small and isolated pieces of code called “components”.\",\r\n    //     \"Redux is a predictable state container designed to help you write JavaScript apps that behave \" +\r\n    //         \"consistently across client, server, and native environments and are easy to test.\",\r\n    //     \"A Promise is a proxy for a value not necessarily known when the promise is created. It allows \" +\r\n    //         \"you to associate handlers with an asynchronous action's eventual success value or failure reason.\",\r\n    //     \"A closure is the combination of a function bundled together (enclosed) with references to its surrounding \" +\r\n    //         \"state (the lexical environment).\",\r\n    //     \"FUNCTIONAL!\",\r\n    // ])\r\n    let cards = useSelector<AppRootStateType, CardsType[]>((state) => state.cards.cards)\r\n\r\n    let id = useSelector<AppRootStateType, string>((state) => state.cardsGrade.updatedGrade.card_id)\r\n    const [numQA, setNumQA] = useState<number>(0)\r\n    const [numQ, setNumQ] = useState<number>(0)\r\n    const [countA, setCountA] = useState<number>(1)\r\n    const [grade, setGrade] = useState<string[]>([\"1\", \"2\", \"3\", \"4\", \"5\"])\r\n    const [show, setShow] = useState<boolean>(false)\r\n    const showAnswer = () => {\r\n        setShow(!show)\r\n    }\r\n    const nextQuestion = () => {\r\n        cards.map(el=>el.question + 1)\r\n        setNumQA(numQA + 1)\r\n        setCountA(countA + 1)\r\n        if (numQ === 1) {\r\n            // let sum = 0;\r\n            // for(let i = 0; i < questions.length; i++){\r\n            //     sum += +questions[i][1];\r\n            // }\r\n            // let threshold = Math.random() * sum;\r\n            // let total = 0;\r\n            // for(let i = 0; i < questions.length; i++){\r\n            //     total += +questions[i][1]\r\n            //     if(total >= threshold){\r\n            //         return questions[i][0]\r\n            //     }\r\n            // }\r\n            // return questions[questions.length-1]\r\n\r\n            setNumQA(Math.floor(Math.random() * cards.length))\r\n            setCountA(countA + 1)\r\n        } else {\r\n        }\r\n        // setQuestion(questions[questions.length-1])\r\n    }\r\n    const startAgain = () => {\r\n        setNumQ(1)\r\n        setCountA(1)\r\n    }\r\n    const newGradesForQuestions = (i: number,id:string) => {\r\n\r\n        dispatch(getGradeTC(i, id))\r\n    }\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">Learn \"Pack Name\"</h2>\r\n            <div id=\"simple-modal-description\">\r\n                <span>\r\n                    Question number: {countA}/{cards.length}{\" \"}\r\n                    {countA === cards.length && (\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            variant={\"outlined\"}\r\n                            onClick={() => {\r\n                                startAgain()\r\n                            }}\r\n                        >\r\n                            start again\r\n                        </Button>\r\n                    )}\r\n                </span>\r\n                <div>{cards.map(el=>el.question[numQA])}</div>\r\n                <div>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        variant={\"outlined\"}\r\n                        disabled={false}\r\n                        onClick={showAnswer}\r\n                    >\r\n                        show answer\r\n                    </Button>\r\n                </div>\r\n                <div>{show ? cards.map(el=>el.answer[numQA]) : \"\"}</div>\r\n            </div>\r\n            <div>\r\n                <h4>Rate Yourself</h4>\r\n                {grade.map((el, i) => (\r\n                    <Button key={\"grade-\" + i} onClick={() => newGradesForQuestions(i,id)}>\r\n                        {el}\r\n                    </Button>\r\n                ))}\r\n            </div>\r\n            <Button color=\"secondary\" variant=\"outlined\" onClick={handleClose}>\r\n                Cancel\r\n            </Button>\r\n            {countA === cards.length ? (\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={\"outlined\"}\r\n                    disabled={true}\r\n                    onClick={() => {\r\n                        startAgain()\r\n                    }}\r\n                >\r\n                    {\" \"}\r\n                    Next{\" \"}\r\n                </Button>\r\n            ) : (\r\n                <Button\r\n                    color=\"primary\"\r\n                    variant={\"outlined\"}\r\n                    disabled={false}\r\n                    onClick={() => {\r\n                        nextQuestion()\r\n                    }}\r\n                >\r\n                    {\" \"}\r\n                    Next{\" \"}\r\n                </Button>\r\n            )}\r\n        </div>\r\n    )\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" type=\"button\" onClick={handleOpen}>\r\n                {props.name}\r\n            </Button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import { Button, Modal } from \"@material-ui/core\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Redirect, useHistory, useParams } from \"react-router-dom\"\r\nimport Loading from \"../../../n1-main/a1-ui/loading/Loading\"\r\nimport { PATH } from \"../../../n1-main/a1-ui/routes/Routes\"\r\nimport { getPackCards, removeCardPack } from \"../../../n1-main/a2-bll/store/cardPacksReducer\"\r\nimport {\r\n    CardsInitialStateType,\r\n    changeNewPageForShowCards,\r\n    changePortionCards,\r\n    getCardsForCardsPack,\r\n} from \"../../../n1-main/a2-bll/store/cardsReducer\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport { CardsType, initCardPacks } from \"../../../n1-main/a3-dal/mainAPI\"\r\nimport SuperPaginator from \"../../../n3-MySuperComponents/SuperPaginator/SuperPaginator\"\r\nimport ShowAnswerModal from \"../../b7-modal/ShowAnswerModal\"\r\nimport styles from \"./Cards.module.scss\"\r\n\r\nconst Cards = () => {\r\n    const { packID } = useParams<{ packID: string }>()\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getCardsForCardsPack({ packID }))\r\n    }, [])\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    const userId = useSelector<AppRootStateType, string>((state) => state.auth.user._id)\r\n    const loadingProgress = useSelector<AppRootStateType, \"loading\" | \"successed\">(\r\n        (state) => state.app.loadingProgress\r\n    )\r\n    let cards = useSelector<AppRootStateType, CardsType[]>((state) => state.cards.cards)\r\n    const cardsState = useSelector<AppRootStateType, CardsInitialStateType>((state) => state.cards)\r\n    const NamePack = useSelector<AppRootStateType, initCardPacks | undefined>((state) =>\r\n        state.cardPacks.cardPacks.find((p) => p._id === packID)\r\n    )?.name\r\n    const deletedPack = useSelector<AppRootStateType, boolean>(\r\n        (state) => state.cardPacks.packDeleted\r\n    )\r\n    const clickToPaginator = (newShowPage: number, currentPortion: number) => {\r\n        dispatch(changeNewPageForShowCards({ newShowPage }))\r\n        dispatch(changePortionCards({ currentPortion }))\r\n        dispatch(getCardsForCardsPack({ packID }))\r\n    }\r\n    const history = useHistory()\r\n    const backToPreviousPage = () => {\r\n        history.push(PATH.PACKS)\r\n    }\r\n    const delPack = () => {\r\n        const idPack = packID\r\n        dispatch(removeCardPack({ idPack }))\r\n    }\r\n    if (!isLogged) {\r\n        return <Redirect to={PATH.SIGN_IN} />\r\n    }\r\n    if (deletedPack) {\r\n        return <Redirect to={PATH.PACKS} />\r\n    }\r\n    if (loadingProgress === \"loading\") return <Loading />\r\n    return (\r\n        <div className={styles.cardsBlock}>\r\n            <div className={styles.body}>\r\n                <div className={styles.controlBlock}>\r\n                    <div className={styles.namePack}>{NamePack}</div>\r\n                    <div className={styles.buttonBlock}>\r\n                        {userId === cardsState.packUserId && (\r\n                            <div>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    type=\"button\"\r\n                                    onClick={delPack}\r\n                                >\r\n                                    Delete pack\r\n                                </Button>\r\n                                <Button variant=\"outlined\" color=\"primary\" type=\"button\">\r\n                                    Rename pack\r\n                                </Button>\r\n                                <Button variant=\"outlined\" color=\"primary\" type=\"button\">\r\n                                    Add card\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n\r\n                        <ShowAnswerModal name=\"learn\" />\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            type=\"button\"\r\n                            onClick={backToPreviousPage}\r\n                        >\r\n                            Back\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <table cellPadding=\"7\" width=\"100%\">\r\n                    <tr>\r\n                        <th>Qustion</th>\r\n                        <th>Answer</th>\r\n                        <th>Grade</th>\r\n                        <th>Shots</th>\r\n                        <th>Created</th>\r\n                        <th>Updated</th>\r\n                    </tr>\r\n                    {cards.length &&\r\n                        cards.map((c) => (\r\n                            <tr>\r\n                                <td align=\"center\">{c.question}</td>\r\n                                <td align=\"center\">\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        color=\"primary\"\r\n                                        type=\"button\"\r\n                                        onClick={() => {\r\n                                            alert(c.answer)\r\n                                        }}\r\n                                    >\r\n                                        Show answer\r\n                                    </Button>\r\n                                </td>\r\n                                <td align=\"center\">{c.grade}</td>\r\n                                <td align=\"center\">{c.shots}</td>\r\n                                <td align=\"center\">{c.created}</td>\r\n                                <td align=\"center\">{c.updated}</td>\r\n                            </tr>\r\n                        ))}\r\n                </table>\r\n                <SuperPaginator\r\n                    currentPage={cardsState.page}\r\n                    pageSize={cardsState.pageCount}\r\n                    portionSize={5}\r\n                    currentPortion={cardsState.currentPortionToPaginator}\r\n                    totalItemsCount={cardsState.cardsTotalCount}\r\n                    onClickToPage={clickToPaginator}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards\r\n","import React, { ChangeEvent, useState } from \"react\"\r\nimport { CardPackType, initCardPacks } from \"../../../n1-main/a3-dal/mainAPI\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { NavLink, Redirect } from \"react-router-dom\"\r\nimport ShowAnswerModal from \"../../b7-modal/ShowAnswerModal\"\r\nimport { Button } from \"@material-ui/core\"\r\n\r\ntype ContainerCardsPackType = {\r\n    cardsPack: initCardPacks\r\n    delPack: (idPack: string) => void\r\n    updateTitle: (newTitle: string, idPack: string) => void\r\n    userId: string\r\n}\r\n\r\nconst CardsPack = (props: ContainerCardsPackType) => {\r\n    return (\r\n        <tr>\r\n            <td align=\"center\">{props.cardsPack.name}</td>\r\n            <td align=\"center\">{props.cardsPack.cardsCount}</td>\r\n            <td align=\"center\">{props.cardsPack.created}</td>\r\n            <td align=\"center\">{props.cardsPack.updated}</td>\r\n            <td align=\"center\">\r\n                <NavLink to={\"/cards/\" + props.cardsPack._id}>\r\n                    <Button variant=\"outlined\" color=\"primary\" type=\"button\">\r\n                        Watch\r\n                    </Button>\r\n                </NavLink>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\nexport default CardsPack\r\n","import { useFormik } from \"formik\"\r\nimport React, { useCallback } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { createCardPack } from \"../../../n1-main/a2-bll/store/cardPacksReducer\"\r\n\r\nconst CreateCardsPack = () => {\r\n    const dispatch = useDispatch()\r\n    const newCardPack = useCallback(\r\n        (newName: string) => {\r\n            dispatch(createCardPack({ newName }))\r\n        },\r\n        [dispatch]\r\n    )\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            NameNewCardsPack: \"\",\r\n        },\r\n        onSubmit: (values) => {\r\n            newCardPack(values.NameNewCardsPack)\r\n        },\r\n    })\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <input\r\n                    id=\"NameNewCardsPack\"\r\n                    name=\"NameNewCardsPack\"\r\n                    placeholder=\"Name new pack\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.NameNewCardsPack}\r\n                />\r\n                <button>Create</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateCardsPack\r\n","import { Slider, Typography } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport React from \"react\"\r\n\r\ntype PropsType = {\r\n    minCount: number\r\n    maxCount: number\r\n    changeMaxMinRange: (newValue: number[]) => void\r\n    setValue: (newValue: number[]) => void\r\n    value: number[]\r\n}\r\n\r\nconst SearchPack = (props: PropsType) => {\r\n    const minValue = props.minCount\r\n    const maxValue = props.maxCount\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        props.setValue(newValue as number[])\r\n    }\r\n    const valuetext = (value: number) => {\r\n        return `${value}`\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            namePack: \"\",\r\n        },\r\n        onSubmit: (values) => {\r\n            formik.resetForm()\r\n            props.changeMaxMinRange(props.value)\r\n        },\r\n    })\r\n    return (\r\n        <div>\r\n            <Slider\r\n                value={props.value}\r\n                onChange={handleChange}\r\n                aria-labelledby=\"range-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                style={{ width: \"200px\" }}\r\n                getAriaValueText={valuetext}\r\n                min={minValue}\r\n                max={maxValue}\r\n                \r\n            />\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <input\r\n                    id=\"namePack\"\r\n                    name=\"namePack\"\r\n                    placeholder=\"Name pack\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.namePack}\r\n                />\r\n                <button>Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchPack\r\n","import React, { ChangeEvent, useCallback, useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport Loading from \"../../../n1-main/a1-ui/loading/Loading\"\r\nimport {\r\n    removeCardPack,\r\n    getPackCards,\r\n    updateCardPack,\r\n    showMyCardsPacks,\r\n    changeMaxMinCards,\r\n    changeSort,\r\n    initCardsPacksStateType,\r\n    changeNewPageForShowPacks,\r\n    changePortionPacks,\r\n} from \"../../../n1-main/a2-bll/store/cardPacksReducer\"\r\nimport { AppRootStateType } from \"../../../n1-main/a2-bll/store/store\"\r\nimport { initCardPacks } from \"../../../n1-main/a3-dal/mainAPI\"\r\nimport SuperPaginator from \"../../../n3-MySuperComponents/SuperPaginator/SuperPaginator\"\r\nimport CardsPack from \"./CardsPack\"\r\nimport CreateCardsPack from \"./CreateCardsPack\"\r\nimport SearchPack from \"./SearchPack\"\r\nimport styles from \"./CardsPacks.module.scss\"\r\n\r\nconst CardPacksPage = () => {\r\n    useEffect(() => {\r\n        dispatch(getPackCards())\r\n    }, [])\r\n    const dispatch = useDispatch()\r\n    const cardPacksState = useSelector<AppRootStateType, initCardsPacksStateType>(\r\n        (state) => state.cardPacks\r\n    )\r\n    const userId = useSelector<AppRootStateType, string>((state) => state.auth.user._id)\r\n    const updateTitle = (newTitle: string, idPack: string) => {\r\n        dispatch(updateCardPack({ idPack, newTitle }))\r\n    }\r\n    const delPack = (idPack: string) => {\r\n        dispatch(removeCardPack({ idPack }))\r\n    }\r\n    const [checked, setChecked] = useState(cardPacksState.showMyCardsPacks)\r\n    const showMyCardPacks = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newIsDoneValue = e.currentTarget.checked\r\n        setChecked(newIsDoneValue)\r\n        dispatch(showMyCardsPacks({ isShow: newIsDoneValue }))\r\n        dispatch(getPackCards())\r\n    }\r\n    const changeMaxMinRange = (newValue: number[]) => {\r\n        dispatch(changeMaxMinCards({ newValue }))\r\n        dispatch(getPackCards())\r\n    }\r\n\r\n    const loadingProgress = useSelector<AppRootStateType, \"loading\" | \"successed\">(\r\n        (state) => state.app.loadingProgress\r\n    )\r\n    const [value, setValue] = React.useState<number[]>([\r\n        cardPacksState.minCardsCount,\r\n        cardPacksState.maxCardsCount,\r\n    ])\r\n    const clickToPaginator = (newShowPage: number, currentPortion: number) => {\r\n        dispatch(changeNewPageForShowPacks({ newShowPage }))\r\n        dispatch(changePortionPacks({ currentPortion }))\r\n        dispatch(getPackCards())\r\n    }\r\n    const changeSortCardsPacks = (\r\n        newValue: \"0updated\" | \"1updated\" | \"0cardsCount\" | \"1cardsCount\"\r\n    ) => {\r\n        dispatch(changeSort({ newValue }))\r\n        dispatch(getPackCards())\r\n    }\r\n\r\n    if (loadingProgress === \"loading\") return <Loading />\r\n    return (\r\n        <div className={styles.cardsPacksBlock}>\r\n            <div className={styles.body}>\r\n                <div className={styles.searchBlock}>\r\n                    <SearchPack\r\n                        minCount={cardPacksState.minCardsCount}\r\n                        maxCount={cardPacksState.maxCardsCount}\r\n                        changeMaxMinRange={changeMaxMinRange}\r\n                        setValue={setValue}\r\n                        value={value}\r\n                    />\r\n\r\n                    <CreateCardsPack />\r\n                    <div>\r\n                        <input type=\"checkbox\" checked={checked} onChange={showMyCardPacks} />\r\n                        My cardPacks\r\n                    </div>\r\n                </div>\r\n                <table cellPadding=\"7\" width=\"100%\">\r\n                    <tr>\r\n                        <th>Cards pack name</th>\r\n                        <th>\r\n                            Cards count\r\n                            <input\r\n                                type=\"button\"\r\n                                value=\"min\"\r\n                                onClick={() => changeSortCardsPacks(\"1cardsCount\")}\r\n                            />\r\n                            <input\r\n                                type=\"button\"\r\n                                value=\"max\"\r\n                                onClick={() => changeSortCardsPacks(\"0cardsCount\")}\r\n                            />\r\n                        </th>\r\n                        <th>\r\n                            Created\r\n                            <input\r\n                                type=\"button\"\r\n                                value=\"Old\"\r\n                                onClick={() => changeSortCardsPacks(\"1updated\")}\r\n                            />\r\n                            <input\r\n                                type=\"button\"\r\n                                value=\"New\"\r\n                                onClick={() => changeSortCardsPacks(\"0updated\")}\r\n                            />\r\n                        </th>\r\n                        <th>Updated</th>\r\n                        <th>Control</th>\r\n                    </tr>\r\n                    {cardPacksState.cardPacks.map((el) => (\r\n                        <CardsPack\r\n                            key={el._id}\r\n                            cardsPack={el}\r\n                            delPack={delPack}\r\n                            updateTitle={updateTitle}\r\n                            userId={userId}\r\n                        />\r\n                    ))}\r\n                </table>\r\n                <SuperPaginator\r\n                    pageSize={10}\r\n                    totalItemsCount={cardPacksState.cardPacksTotalCount}\r\n                    currentPage={cardPacksState.page}\r\n                    onClickToPage={clickToPaginator}\r\n                    portionSize={5}\r\n                    currentPortion={cardPacksState.currentPortionToPaginator}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CardPacksPage\r\n","import { Redirect, Route, Switch } from \"react-router-dom\"\r\nimport Profile from \"../../../n2-features/b6-profile/Profile\"\r\nimport Error from \"../../../n2-features/b4-errors/error/Error\"\r\nimport React from \"react\"\r\nimport RenewalPass from \"../../../n2-features/b3-pass/Password/RenewalPass\"\r\nimport SignInWithFormik from \"../../../n2-features/b2-auth/sign-in-up/SignIn\"\r\nimport SignUp from \"../../../n2-features/b2-auth/sign-in-up/SignUp\"\r\nimport NewPass from \"../../../n2-features/b3-pass/Password/NewPass\"\r\nimport UpdateProfile from \"../../../n2-features/b6-profile/UpdateProfile\"\r\nimport Cards from \"../../../n2-features/b5-cardsPack/Cards/Cards\"\r\nimport CardPacksPage from \"../../../n2-features/b5-cardsPack/cardsPacksPage/CardPacksPage\"\r\nimport ShowAnswerModal from \"../../../n2-features/b7-modal/ShowAnswerModal\"\r\n\r\nexport const PATH = {\r\n    PROFILE: \"/profile\",\r\n    SIGN_IN: \"/sign-in\",\r\n    SIGN_UP: \"/sign-up\",\r\n    NEW_PASS: \"/new-pass/:token?\",\r\n    RENEWAL_PASS: \"/renewal-pass\",\r\n    ERROR: \"/404\",\r\n    UPDATE_USER: \"/update-user\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards/:packID?\",\r\n    PACKS_RAW: \"/packs-raw\",\r\n    QUIZ: \"/learn\",\r\n}\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={\"/\"} exact component={Profile} />\r\n                <Route path={PATH.PROFILE} component={Profile} />\r\n                <Route path={PATH.PROFILE} component={Error} />\r\n                <Route path={PATH.SIGN_IN} component={SignInWithFormik} />\r\n                <Route path={PATH.SIGN_UP} component={SignUp} />\r\n                <Route path={PATH.NEW_PASS} component={NewPass} />\r\n                <Route path={PATH.RENEWAL_PASS} component={RenewalPass} />\r\n                <Route path={PATH.UPDATE_USER} component={UpdateProfile} />\r\n                <Route path={PATH.PACKS} component={CardPacksPage} />\r\n                <Route path={PATH.CARDS} component={Cards} />\r\n                <Route path={PATH.QUIZ} component={ShowAnswerModal} />\r\n                <Route path={\"/404\"} render={() => <h1>404:PAGE NOT FOUND</h1>} />\r\n                <Redirect from={\"*\"} to={PATH.ERROR} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n","import { Button } from '@material-ui/core';\r\nimport React, { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { logout } from '../../../n1-main/a2-bll/store/mainAuthReducer';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst Logout = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logout())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={logoutHandler}>Logout<ExitToAppIcon/></Button>\r\n        </div>\r\n    )\r\n}\r\nexport default Logout","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport s from \"./Header.module.css\"\r\nimport { PATH } from \"../routes/Routes\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../../a2-bll/store/store\"\r\nimport Logout from \"../../../n2-features/b2-auth/sign-in-up/Logout\"\r\nimport { Avatar, Button } from \"@material-ui/core\"\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\"\r\nimport SettingsIcon from \"@material-ui/icons/Settings\"\r\nimport VpnKeyIcon from \"@material-ui/icons/VpnKey\"\r\n\r\nfunction Header() {\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n\r\n    return (\r\n        <>\r\n            {isLogged && (\r\n                <nav className={s.nav}>\r\n                    <div>\r\n                        <NavLink to={PATH.PROFILE} replace>\r\n                            <Avatar>\r\n                                <PermIdentityIcon />\r\n                            </Avatar>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div className={s.headerLink}>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.PROFILE} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <PermIdentityIcon />\r\n                                    My Profile{\" \"}\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.PACKS} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <PermIdentityIcon />\r\n                                    Packs\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={s.item}>\r\n                            <NavLink to={PATH.UPDATE_USER} activeClassName={s.activeLink} replace>\r\n                                <Button variant=\"outlined\">\r\n                                    <SettingsIcon /> Settings{\" \"}\r\n                                </Button>\r\n                            </NavLink>\r\n                        </div>\r\n                        <Logout />\r\n                    </div>\r\n                </nav>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect } from \"react\"\r\nimport { HashRouter, Redirect } from \"react-router-dom\"\r\nimport \"./App.css\"\r\nimport { PATH, Routes } from \"./routes/Routes\"\r\nimport Header from \"./header/Header\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { AppRootStateType } from \"../a2-bll/store/store\"\r\nimport Loading from \"./loading/Loading\"\r\nimport { isInitializedTC } from \"../a2-bll/store/appReducer\"\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLogged = useSelector<AppRootStateType, boolean>((state) => state.auth.isLogged)\r\n    useEffect(() => {\r\n        dispatch(isInitializedTC())\r\n    }, [])\r\n    if (!isInitialized) return <Loading />\r\n    return (\r\n        <HashRouter>\r\n            {!isLogged && <Redirect to={PATH.SIGN_IN} />}\r\n            <div className={\"mainPage\"}>\r\n                <Header />\r\n                <Routes />\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { cardPacksReducer } from \"./cardPacksReducer\"\r\nimport { combineReducers } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { configureStore } from \"@reduxjs/toolkit\"\r\nimport { appReducer } from \"./appReducer\"\r\nimport { cardsReducer } from \"./cardsReducer\"\r\nimport { gradeReducer } from \"./cardsGradeReducer\"\r\nimport { authReducer } from \"./mainAuthReducer\"\r\ndeclare global {\r\n    interface Window {\r\n        store: any\r\n    }\r\n}\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    cardPacks: cardPacksReducer,\r\n    cardsGrade: gradeReducer,\r\n    app: appReducer,\r\n    cards: cardsReducer,\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk),\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nwindow.store = store\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './n1-main/a1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./n1-main/a2-bll/store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"SignIn_paper__3UzwU\",\"avatarConatiner\":\"SignIn_avatarConatiner__2ch1G\",\"avatar\":\"SignIn_avatar__1t8EG\",\"typographyContainer\":\"SignIn_typographyContainer__31MH1\",\"form\":\"SignIn_form__1qcJ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__1BzxD\",\"item\":\"Header_item__1Kwze\",\"activeLink\":\"Header_activeLink__DiCTj\",\"headerLink\":\"Header_headerLink__3zD2_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorBody\":\"SuperPaginator_paginatorBody__13Qf0\",\"numberPageStyle\":\"SuperPaginator_numberPageStyle__3guWr\",\"pageActive\":\"SuperPaginator_pageActive__1H9dT\",\"buttons\":\"SuperPaginator_buttons__25S4F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authBlock\":\"CommonStylesForAuth_authBlock__15zKS\",\"inputBlock\":\"CommonStylesForAuth_inputBlock__20tX8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsBlock\":\"Cards_cardsBlock__YqTPl\",\"body\":\"Cards_body__1pB6K\",\"controlBlock\":\"Cards_controlBlock__2tnx5\",\"namePack\":\"Cards_namePack__21hNC\",\"buttonBlock\":\"Cards_buttonBlock__3lTYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Profile_root__1m3NI\",\"media\":\"Profile_media__2PS8D\",\"updateProfile\":\"Profile_updateProfile__3OaEG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__18Len\",\"red\":\"SuperButton_red__3BY6U\",\"button\":\"SuperButton_button__1Ymxf\",\"blink\":\"SuperButton_blink__3T8lZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsPacksBlock\":\"CardsPacks_cardsPacksBlock__RkoVb\",\"body\":\"CardsPacks_body__1mH0f\",\"searchBlock\":\"CardsPacks_searchBlock__HshN8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2dgcj\",\"spanClassName\":\"SuperCheckbox_spanClassName__3r9pY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadPage\":\"Loading_loadPage__2KB7b\",\"loader\":\"Loading_loader__2_ZAn\",\"rotate\":\"Loading_rotate__24D8Z\"};"],"sourceRoot":""}